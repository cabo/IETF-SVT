<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.14 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC6931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6931.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7518 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-santesson-svt-00" category="std" consensus="true">

  <front>
    <title>Signature Validation Token</title>

    <author initials="S." surname="Santesson" fullname="Stefan Santesson">
      <organization abbrev="3xA Security">3xA Security AB</organization>
      <address>
        <postal>
          <street>Forskningsbyn Ideon</street>
          <city>Lund</city>
          <code>223 70</code>
          <country>SE</country>
        </postal>
        <email>sts@aaa-sec.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>516 Dranesville Road</street>
          <city>Herndon, VA</city>
          <code>20170</code>
          <country>US</country>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="21"/>

    <area>Security</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Electronic signatures have a limited lifespan with respect to the time period that they
can be validated and determined to be authentic. The Signature Validation Token (SVT)
defined in this specification provides evidence that asserts the validity of an
electronic signature. The SVT is provided by a trusted authority, which asserts that
a particular signature was successfully validated according to defined procedures at
a certain time. Any future validation of that electronic signature can be satisfied by
validating the SVT without any need to also validate the original electronic signature or
the associated digital certificates. SVT supports electronic signatures in CMS, XML, and
PDF documents.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>Electronic signatures have a limited lifespan regarding when they can be validated and
determined to be authentic. Many factors make it more difficult to validate electronic
signatures over time. For example:</t>

<t><list style="symbols">
  <t>Trusted information about the validity of the certificate containing the signer’s public key is not available.</t>
  <t>Trusted information about the date and time when the signature was actually created is not available.</t>
  <t>Algorithms used to create the electronic signature are no longer considered secure.</t>
  <t>Services necessary to validate the signature are no longer available.</t>
  <t>Supporting evidence such as CA certificates, OCSP responses, CRLs, or timestamps.</t>
</list></t>

<t>The challenges to validation of an electronic signature increases over time, and
eventually it is simply impossible to verify the signature with a sufficient level of
assurance.</t>

<t>Existing standards, such as the ETSI XAdES <xref target="XADES"/> profile for XML
signatures <xref target="XMLDSIG11"/>, ETSI PAdES <xref target="PADES"/> profile for PDF signatures
<xref target="ISOPDF2"/>, and ETSI CAdES <xref target="CADES"/> profile for CMS signatures
<xref target="RFC5652"/> can be used to prolong the lifetime of a signature by
storing data that supports validation of the electronic signature beyond
the lifetime of the certificate containing the signer’s public key, which
is often referred to as the signing certificate.  The problem with this
approach is that the amount of information that must be stored along with
the electronic signature constantly grows over time.  The increasing
amount of information and signed objects that need to be validated in
order to verify the original electronic signature grows in complexity to
the point where validation of the electronic signature may become
infeasible.</t>

<t>The Signature Validation Token (SVT) defined in this specification takes a fundamentally
different approach to the problem by providing evidence by a trusted authority that
asserts the validity of an electronic signature. The SVT asserts that a particular
electronic signature was successfully validated  by a trusted authority according to
defined procedures at a certain date and time. Once the SVT is issued by a trusted
authority, any future validation of that electronic signature is satisfied by validating
the SVT, without any need to also validate the original electronic signature.</t>

<t>This approach drastically reduces the complexity of validation of older electronic
signatures for the simple reason that validating the SVT eliminates the need to
validate the many signed objects that would otherwise been needed to provide the
same level of assurance. The SVT can be signed with private keys and algorithms that
provide confidence for a considerable time period. In fact, multiple SVTs can be used
to offer greater assurance. For example, one SVT could be produced with a large RSA
private key, a second one with a strong elliptic curve, and a third one with a quantum
safe digital signature algorithm to protect against advances in computing power and
cryptanalytic capabilities. Further, the trusted authority can add additional SVTs
in the future using fresh private keys and signatures to extend the lifetime of the,
if necessary.</t>

</section>
<section anchor="defs" title="Definitions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document use the following terms:</t>

<t><list style="symbols">
  <t>Signed Data – The data covered by a particular electronic signature. This is typically
equivalent to the signed content of a document, and it represents the data that the
signer intended to sign. In some cases, such as in some XML signatures, the signed data
can be the collection of several data fragments each referenced by the signature. In the
case of PDF, this is the data covered by the “ByteRange” parameter in the signature
dictionary.</t>
  <t>Signed Bytes – These are the actual bytes of data that were hashed and signed by the
digital signature algorithm. In most cases, this is not the actual Signed Data, but a
collection of signature metadata that includes references (hash) of the Signed Data as
well as information about algorithms and other data bound to a signature. In XML, this
is the canonicalized SignedInfo element. In CMS and PDF signatures, this is the
DER-encoded SignedAttributes structure.</t>
</list></t>

<t>When these terms are used as defined in this section, they appear with a
capitalized first letter.</t>

</section>
<section anchor="svt" title="Signature Validation Token">

<t>The Signature Validation Token (SVT) is created by a trusted service to capture
evidence of successful electronic signature verification, and then relying
parties can depend on the checking that has already taken place by the
trusted service.</t>

<section anchor="svt-function" title="Signature Validation Token Function">

<t>The function of the SVT is to capture evidence of electronic signature
validity at one instance of secure signature validation process and to
use that evidence to eliminate the need to perform any repeated
cryptographic validation of the original electronic signature value, as
well as reliance on any hash values bound to that signature.  The SVT
achieves this by binding the following information to a specific
electronic signature:</t>

<t><list style="symbols">
  <t>A unique identification of the electronic signature.</t>
  <t>The data and metadata signed by the electronic signature.</t>
  <t>The signer’s certificate that was validated as part of electronic signature verification.</t>
  <t>The certification path that was used to validate the signer’s certificate.</t>
  <t>An assertion providing evidence of that the signature was verified, the date and time the verification was performed, the procedures used to verify the electronic signature, and the outcome of the verification.</t>
  <t>An assertion providing evidence of the date and time at which the signature is known to have existed, the procedures used to validate the date and time of existence, and the outcome of the validation.</t>
</list></t>

<t>Using an SVT is equivalent to validating a signed document in a system once, and then
using that document multiple times without subsequent revalidating the electronic
signature for each usage. Such procedures are common in systems where the document is
residing in a safe and trusted environment where it is protected against modification. The
SVT allows the safe and trusted environment to expand beyond a locally controlled
environment, and the SVT allows a greater period between original electronic signature
verification and subsequent usage.</t>

<t>Using the SVT, the electronic signature verification of a document can be take place
once using a reliable trusted service, and then any relying party that is able to
depend on the verification process already performed by the trusted service. The SVT
is therefore not only a valuable tool to extend the lifetime of a signed document, but
also avoids the need for careful integration between electronic signature verification
and document usage.</t>

</section>
<section anchor="svt-syntax" title="Signature Validation Token Syntax">

<t>The SVT is carried in a JSON Web Token (JWT) as defined in <xref target="RFC7519"/>.</t>

<section anchor="svt-syntax-dt" title="Data Types">

<t>The contents of claims in an SVT are specified using the following data types:</t>

<t><list style="symbols">
  <t>String – JSON Data Type of string that contains an arbitrary case sensitive string value.</t>
  <t>Base64Binary – JSON Data Type of string that contains of Base64 encoded byte array of binary data.</t>
  <t>StringOrURI – JSON Data Type of string that contains an arbitrary string or an URI as defined in <xref target="RFC7519"/>, which REQUIRES a value containing the colon character (“:”) to be a URI.</t>
  <t>URI – JSON Data Type of string that contains an URI as defined in <xref target="RFC7519"/>.</t>
  <t>Integer – JSON Data Type of number that contains a 32-bit signed integer value (from -2^31 to 2^31-1).</t>
  <t>Long – JSON Data Type of number that contains a 64-bit signed integer value (from -2^63 to 2^63-1).</t>
  <t>NumericDate – JSON Data Type of number that contains a data as defined in <xref target="RFC7519"/>, which is the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.</t>
  <t>Boolean – JSON Data Type of boolean that contains explicit value of true or false.</t>
  <t>Object&lt;Class&gt; – A JSON object holding a claims object of a class defined in this specification (see <xref target="svt-syntax-claim"/>).</t>
  <t>Map&lt;Type&gt; – A JSON object with name-value pairs where the value is an object of the specified Type in the notation. For example, Map&lt;String&gt; is a JSON object with name value pairs where all values are of type String.</t>
  <t>Array – A JSON array of a specific data type as defined in this section. An array is expressed in this specification by square brackets. For example, [String] indicates an array of String values, and [Object&lt;DocHash&gt;] indicates an array of DocHash objects.</t>
  <t>Null – A JSON null that represents an absent value. A claim with a null value is equivalent with an absent claim.</t>
</list></t>

</section>
<section anchor="svt-syntax-claim" title="Signature Validation Token JWT Claims">

<t>The SVT MUST contain only JWT claims in the following list:</t>

<t><list style="symbols">
  <t>jti – A String data type that is a “JWT ID” registered claim according to <xref target="RFC7519"/>. It is RECOMMENDED that the identifier holds a hexadecimal string representation of a 128-bit unsigned integer. A SVT MUST contain one “JWT ID” claim.</t>
  <t>iss  – A StringOrURI data type that is an “Issuer” registered claim according to <xref target="RFC7519"/>, which is an arbitrary unique identifier of the SVT issuer. This value SHOULD have the value of an URI based on a domain owned by the issuer. A SVT MUST contain one “Issuer” claim.</t>
  <t>iat – A NumericDate data type that is an “Issued At” registered claim according to <xref target="RFC7519"/>, which expresses the date and time when this SVT was issued. A SVT MUST contain one “Issued At” claim.</t>
  <t>aud – A [StringOrURI] data type or a StringOrURI data type that is an “Audience” registered claim according to <xref target="RFC7519"/>. The audience claim is an array of one or more identifiers, identifying intended recipients of the SVT. Each identifier MAY identify a single entity, a group of entities or a common policy adopted by a group of entities. If only one value is provided it MAY be provided as a single StringOrURI data type value instead of as an array of values. Inclusion of the “Audience” claim in a SVT is OPTIONAL.</t>
  <t>exp – A NumericDate data type that is an “Expiration Time” registered claim according to <xref target="RFC7519"/>, which expresses the date and time when services and responsibilities related to this SVT is no longer provided by the SVT issuer. The precise meaning of the expiration time claim is defined by local policies. See implementation note below. Inclusion of the “Expiration Time” claim in a SVT is OPTIONAL.</t>
  <t>sig_val_claims – A Object&lt;SigValidation&gt; data type that contains signature validation claims for this SVT extending the standard registered JTW claims above. A SVT MUST contain one sig_val_claims claim.</t>
</list></t>

<t>Note: An SVT asserts that a particular validation process was undertaken at a stated
date and time. This fact never changes and never expires. However, some other aspects
of the SVT such as liability for false claims or service provision related to a specific
SVT may expire after a certain period of time, such as a service where an old SVT can be
upgraded to a new SVT signed with fresh keys and algorithms.</t>

</section>
<section anchor="sigvalidation-obj-class" title="SigValidation Object Class">

<t>The sig_val_claims JWT claim uses the SigValidation object class. A SigValidation object
holds all custom claims, and a SigValidation object contains the following parameters:</t>

<t><list style="symbols">
  <t>ver – A String data type representing the version. This parameter MUST be present, and the version in this specification indicated by the value “1.0”.</t>
  <t>profile – A StringOrURI data type representing the name of a profile that defines conventions followed for specific claims and any extension points used by the SVT issuer. Inclusion of this parameter is OPTIONAL.</t>
  <t>hash_algo – A URI data type that identifies the hash algorithm used to compute the hash values within the SVT. The URI identifier MUST be one defined in <xref target="RFC6931"/> or in the IANA registry defined by this specification. This parameter MUST be present.</t>
  <t>sig – A [Object&lt;Signature&gt;] data type that gives information about validated electronic signatures as an array of Signature objects. If the SVT contains signature validation evidence for more than one signature, then each signature is represented by a separate Signature object. At least one Signature object MUST be present.</t>
  <t>ext – A Map&lt;String&gt; data type that provides additional claims related to the SVT. Extension claims are added at the discretion of the SVT issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="signature-obj-class" title="Signature Claims Object Class">

<t>The sig parameter in the SigValidation object class uses the Signature object
class. The Signature object contains claims related to signature validation
evidence for one signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>sig_ref – A Object&lt;SigReference&gt; data type that contains reference information identifying the target signature. This parameter MUST be present.</t>
  <t>sig_data – A [Object&lt;SignedData&gt;] data type that contains an array of references to Signed Data that was signed by the target electronic signature.  This parameter MUST be present.</t>
  <t>signer_cert_ref – A Object&lt;CertReference&gt; data type that references the signer’s certificate and optionally reference to a supporting certification path that was used to verify the target electronic signature. This parameter MUST be present.</t>
  <t>sig_val – A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of signature verification according to defined procedures. This parameter MUST be present.</t>
  <t>time_val – A [Object&lt;TimeValidation&gt;] data type that contains an array of time verification results that the target signature has existed at a specific date and time in the past. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="sigreference-obj-class" title="SigReference Claims Object Class">

<t>The sig_ref parameter in the Signature object class uses the SigReference object
class. The SigReference object provides information used to match the Signature
claims object to a specific target electronic signature and to verify the integrity
of the target signature value and Signed Bytes, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>id – A String data type that contains an identifier assigned to the target signature. Inclusion of this parameter is OPTIONAL.</t>
  <t>sig_hash – A Base64Binary data type that contains a hash value of the target electronic signature value. This parameter MUST be present.</t>
  <t>sb_hash – A Base64Binary data type that contains a hash value of the Signed Bytes of the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="signeddata-obj-class" title="SignedData Claims Object Class">

<t>The sig_data parameter in the Signature object class uses the SignedData object
class. The SignedData object provides information used to verify the target electronic
signature references to Signed Data as well as to verify the integrity of all data that
is signed by the target signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>ref – A String data type that contains a reference identifier for the data or data fragment covered by the target electronic signature. This parameter MUST be present.</t>
  <t>hash – A Base64Binary data type that contains the hash value for the data covered by the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="policyval-obj-class" title="PolicyValidation Claims Object Class">

<t>The sig_val parameter in the Signature object class uses the PolicyValidation object
class. The PolicyValidation object provides information about the result of a validation
process according to a spefific policy, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>pol – A StringOrURI data type that contains the identifier of the policy governing the electronic signature verification process. This parameter MUST be present.</t>
  <t>res – A String data type that contains the result of the electronic signature verification process. The value MUST be one of “PASSED”, “FAILED” or “INDETERMINATE” as defined by <xref target="ETSI319102-1"/>. This parameter MUST be present.</t>
  <t>msg – A String data type that contains a message describing the result. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="timever-obj-class" title="TimeValidation Claims Object Class">

<t>The time_val parameter in the Signature object class uses the TimeValidation object
class. The TimeValidation claims object provides information about the result of
validating time evidence asserting that the target signature existed at a particular
date and time in the past, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>time – A NumericDate data type that contains the verified time. This parameter MUST be present.</t>
  <t>type – A StringOrURI data type that contains an identifier of the type of evidence of time. This parameter MUST be present.</t>
  <t>iss – A StringOrURI data type that contains an identifier of the entity that issued the evidence of time. This parameter MUST be present.</t>
  <t>id – A String data type that contains an unique identifier assigned to the evidence of time.  Inclusion of this parameter is OPTIONAL.</t>
  <t>val – A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of the time evidence validation according to defined validation procedures. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="certref-obj-class" title="CertReference Claims Object Class">

<t>The signer_cert_ref parameter in the Signature object class uses the CertReference object
class. The CertReference object references a single X.509 certificate or a X.509
certification path, either by providing the certificate data or by providing hash
references for certificates that can be located in the target electronic signature, and
it contains the following parameters:</t>

<t><list style="symbols">
  <t>type – A StringOrURI data type that contains an identifier of the type of reference. The type identifier MUST be one of the identifiers defined below, an identifier specified by the selected profile, or a URI identifier. This parameter MUST be present.</t>
  <t>ref – A [String] data type that contains an array of string parameters according to conventions defined by the type identifier. This parameter MUST be present.</t>
</list></t>

<t>The following type identifiers are defined:</t>

<t><list style="symbols">
  <t>“chain” – The ref contains an array of Base64 encoded X.509 certificates <xref target="RFC5280"/>. The certificates MUST be provided in the order starting with the end entity certificate. Any following certificate must be able to validate the signature on the previous certificate in the array.</t>
  <t>chain_hash – The ref contains an array of one or more Base64 encoded hash values where each hash value is a hash over a X.509 certificate <xref target="RFC5280"/> used to validate the signature.  The certificates MUST be provided in the order starting with the end entity certificate.  Any following certificate must be able to validate the signature on the previous certificate in the array. This option MUST NOT be used unless all hashed certificates are present in the target electronic signature.</t>
</list></t>

<t>Note: All certificates referenced using the identifiers above are X.509 certificates.
Profiles of this specification MAY define alternative types of public key containers;
however, a major function of these referenced certificates is not just to reference
the public key, but also to provide the subject name of the signer. It is therefore
important for the full function of an SVT that the referenced public key container also
provides the means to identify of the signer.</t>

</section>
<section anchor="svt-jose-header" title="SVT JOSE Header">

<t>The SVT JWT MUST contain the following JOSE header parameters in accordance with
Section 5 of <xref target="RFC7519"/>:</t>

<t><list style="symbols">
  <t>typ – This parameter MUST have the string value “JWT” (upper case).</t>
  <t>alg – This parameter identifies the algorithm used to sign the SVT JWT. The algorithm identifier MUST be specified in <xref target="RFC7518"/> or the IANA JSON Web Signature and Encryption Algorithms Registry [ add a ref ]. The specified signature hash algorithm MUST be identical to the hash algorithm specified in the hash_algo parameter of the SigValidation object within the sig_val_claims claim.</t>
</list></t>

<t>The SVT header MUST contain a public key or a reference to a public key used to verify the signature on the SVT in accordance with <xref target="RFC7515"/>. Each profile, as discussed in <xref target="profiles"/>, MUST define the requirements for how the key or key reference is included in the header.</t>

</section>
</section>
</section>
<section anchor="profiles" title="Profiles">

<t>Each signed document and signature type will have to define the precise content and
use of several claims in the SVT.</t>

<t>Each profile MUST as a minimum define:</t>

<t><list style="symbols">
  <t>How to reference the Signed Data content of the signed document.</t>
  <t>How to reference to the target electronic signature and the Signed Bytes of the signature.</t>
  <t>How to reference certificates supporting each electronic siganture.</t>
  <t>How to include public keys or references to public keys in the SVT.</t>
  <t>Whether each electronic signature is supported by a single SVT, or whether one SVT may support multiple electronic signatures of the same document.</t>
</list></t>

<t>A profile MAY also define:</t>

<t><list style="symbols">
  <t>Explicit information on how to perform signature validation based on an SVT.</t>
  <t>How to attach an SVT to an electronic signature or signed document.</t>
</list></t>

</section>
<section anchor="signature-verification-with-a-svt" title="Signature Verification with a SVT">

<t>Signature verification based on an a SVT MUST follow these steps:</t>

<t><list style="numbers">
  <t>Locate all available SVTs available for the signed document that are relevant for the target electronic signature.</t>
  <t>Select the most recent SVT that can be successfully validated and meets the requirement of the relying party.</t>
  <t>Verify the integrity of the signature and the Signed Bytes of the target electronic signature using the sig_ref claim.</t>
  <t>Verify that the Signed Data reference in the original electronic signature matches the reference values in the sig_data_ref claim.</t>
  <t>Verify the integrity of referenced Signed Data using provided hash values in the sig_data_ref claim.</t>
  <t>Obtain the verified certificates supporting the asserted electronic signature verification through the signer_cert_ref claim.</t>
  <t>Verify that signature validation policy results satisfy the requirements of the relying party.</t>
  <t>Verify that verified time results satisfy the context for the use of the signed document.</t>
</list></t>

<t>After successfully performing these steps, signature validity is established as well as
the trusted signer certificate binding the identity of the signer to the electronic
signature.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>{ To be written }</t>

</section>
<section anchor="seccons" title="Security Considerations">

<t>{ To be written }</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC8174;
&RFC5280;
&RFC5652;
&RFC6931;
&RFC7515;
&RFC7518;
&RFC7519;
<reference anchor="ETSI319102-1" >
  <front>
    <title>ETSI - Electronic Signatures and Infrastructures (ESI); Procedures for Creation and Validation of AdES Digital Signatures; Part 1: Creation and Validation</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="May"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 102-1 v1.1.1"/>
</reference>
<reference anchor="XMLDSIG11" >
  <front>
    <title>XML Signature Syntax and Processing Version 1.1</title>
    <author initials="D." surname="Eastlake" fullname="Donald Eastlake">
      <organization></organization>
    </author>
    <author initials="J." surname="Reagle" fullname="Joseph Reagle">
      <organization></organization>
    </author>
    <author initials="D." surname="Solo" fullname="David Solo">
      <organization></organization>
    </author>
    <author initials="F." surname="Hirsch" fullname="Frederick Hirsch">
      <organization></organization>
    </author>
    <author initials="M." surname="Nystrom" fullname="Magnus Nystrom">
      <organization></organization>
    </author>
    <author initials="T." surname="Roessler" fullname="Thomas Roessler">
      <organization></organization>
    </author>
    <author initials="K." surname="Yiu" fullname="Kelvin Yiu">
      <organization></organization>
    </author>
    <date year="2013" month="April" day="11"/>
  </front>
  <seriesInfo name="W3C" value="Proposed Recommendation"/>
</reference>
<reference anchor="ISOPDF2" >
  <front>
    <title>Document management -- Portable document format -- Part 2: PDF 2.0</title>
    <author >
      <organization>ISO</organization>
    </author>
    <date year="2017" month="July"/>
  </front>
  <seriesInfo name="ISO" value="32000-2"/>
</reference>
<reference anchor="XADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); XAdES digital signatures; Part 1: Building blocks and XAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 132-1 v1.1.1"/>
</reference>
<reference anchor="PADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); PAdES digital signatures; Part 1: Building blocks and PAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 142-1 v1.1.1"/>
</reference>
<reference anchor="CADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); CAdES digital signatures; Part 1: Building blocks and CAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 122-1 v1.1.1"/>
</reference>


    </references>



<section anchor="appendix-examples" title="Appendix: Examples">

<t>The following example illustrates a basic SVT according to this specification
issued for a signed PDF document.</t>

<t>Note: Line breaks in the decoded example are inserted for readablilty. Line
breaks are not allowed in valid JSON data.</t>

<t>Signature validation token JWT:</t>

<figure><artwork><![CDATA[
    eyJraWQiOiJPZW5JKzQzNEpoYnZmRG50ZlZcLzhyT3hHN0ZrdnlqYUtWSmFWcUlG
    QlhvaFZoQWU1Zks4YW5vdjFTNjg4cjdLYmFsK2Z2cGFIMWo4aWJnNTJRQnkxUFE9
    PSIsInR5cCI6IkpXVCIsImFsZyI6IlJTNTEyIn0.eyJhdWQiOiJodHRwOlwvXC9l
    eGFtcGxlLmNvbVwvYXVkaWVuY2UxIiwiaXNzIjoiaHR0cHM6XC9cL3N3ZWRlbmNv
    bm5lY3Quc2VcL3ZhbGlkYXRvciIsImlhdCI6MTU4MjczMDY0NSwianRpIjoiZTIy
    YzViZTZkZDZjYzZkYjgzNGJjY2QwNjZmNWUyZTMiLCJzaWdfdmFsX2NsYWltcyI6
    eyJzaWciOlt7ImV4dCI6bnVsbCwic2lnX3ZhbCI6W3sibXNnIjoiSW52YWxpZCBz
    aWduYXR1cmUiLCJleHQiOm51bGwsInJlcyI6IkZBSUxFRCIsInBvbCI6Imh0dHA6
    XC9cL2lkLnN3ZWRlbmNvbm5lY3Quc2VcL3N2dFwvc2lndmFsLXBvbGljeVwvY2hh
    aW5cLzAxIn1dLCJzaWdfcmVmIjp7InNpZ19oYXNoIjoiQmh1RTlCQ1lkcUxneW93
    bDJQYm1uSzlkSkFtaVZ0VDF1OVZnaUY5OWgyaFZQekU0WExXdmJDUGU0YUNKM0l6
    RmZvTDlrM3RXcjBXK3d5OUJlcWlyY1E9PSIsImlkIjpudWxsLCJzYl9oYXNoIjoi
    YnVlcTVIVE8xYnRwQ3JYUlg3VHpFS1VyTkpRaEdHOHFCaDR3eEVTcVJMM0J6bjRj
    bHZLMzdqWXUwS2pNTWtnSlFFTWZBMWIzaW1peTc5dDdoK1loOHc9PSJ9LCJzaWdu
    ZXJfY2VydF9yZWYiOnsicmVmIjpbIk5TdUZNXC92SitiZUJsUXRRVHptY1loNXg3
    TDhXQzlFMUtQSFJBMWlvTk9sS1ZHYmxhOVVSelljc2lzQXgyYmNzcU9oa3ZWVGMz
    bUs5RTZhZzA3aGZhdz09Il0sInR5cGUiOiJjaGFpbl9oYXNoIn0sInNpZ19kYXRh
    X3JlZiI6W3sicmVmIjoiMCAxMjI5MzUgMTI3OTM3IDI3NDMwIiwiaGFzaCI6Imt1
    VWI4NkZzTU5tSmwzdjRiUUswOUZrUWd2bzlReDAxbk5SeVFLVVppaEdFdW1kVnF0
    dUJLTlBxWkkxVHpDUWV3Nm44b0ZNak5oQjhDMFhNSmxrRE9RPT0ifV0sInRpbWVf
    dmFsIjpbXX1dLCJleHQiOnsibmFtZTIiOiJ2YWwyIiwibmFtZTEiOiJ2YWwxIn0s
    InZlciI6IjEuMCIsInByb2ZpbGUiOiJQREYiLCJoYXNoX2FsZ28iOiJodHRwOlwv
    XC93d3cudzMub3JnXC8yMDAxXC8wNFwveG1sZW5jI3NoYTUxMiJ9fQ.DhrCRxT_U
    8LeqK1BU9-5Bqui2cs5n21PrSqPnDtVa7mxUtqTnouOXjVfuWR0lfNAjEkc1y2QS
    X5x2dmMdCpNLWX127UHYiAm8NzeYuoWqdnxKiy61hZ1l0Jldnk52ngG_2UNDnrCG
    Bo9OgC90kG2bFQimZB3WgVtE7ad_HAwIXwd-vEHt6Sf2yWXlUTYqQ1Dxgq6pTKQn
    uf5ahsHVyeDihgNeix8-cGx1MEvvHNUpCcIXBx67BEcZ-SrqRoIZkVqEcW83KFMg
    qKWmWDgp4z_CKM5ix2dVzwp1GvYOM6M3QUKYgmiNA6dMWJvXeJZ-KKi5A-6gEqfg
    OsixuZechcDon_3nMzEeNBSJFXU7ohkvxIJN9LXNFAxzAT2UmASxrL9wvaQMmJHY
    Meet-vUsOPWcsq07eKO5bnsYwrs9igYeotgcT_Nl74Rmf9uMye_IgyzlS_NLL4xq
    9Aaf6LPXWZ0S_plugvfzv7HuzXNOY994voq8sOpO9xKYhqYnzbdDFKU
]]></artwork></figure>

<t>Decoded JWT Header:</t>

<figure><artwork><![CDATA[
    {
      "kid" : "OenI+434JhbvfDntfV\/8rOxG7FkvyjaKVJaVqIFBXohVhAe5fK8an
               ov1S688r7Kbal+fvpaH1j8ibg52QBy1PQ==",
      "typ" : "JWT",
      "alg" : "RS512"
    }
]]></artwork></figure>

<t>Decoded JWT Claims:</t>

<figure><artwork><![CDATA[
    {
      "aud" : "http://example.com/audience1",
      "iss" : "https://swedenconnect.se/validator",
      "iat" : 1582730645,
      "jti" : "e22c5be6dd6cc6db834bccd066f5e2e3",
      "sig_val_claims" : {
        "sig" : [ {
          "ext" : null,
          "sig_val" : [ {
            "msg" : "Invalid signature",
            "ext" : null,
            "res" : "FAILED",
            "pol" : "http://id.swedenconnect.se/svt/sigval-policy/
                     chain/01"
          } ],
          "sig_ref" : {
            "sig_hash" : "BhuE9BCYdqLgyowl2PbmnK9dJAmiVtT1u9VgiF99h2h
                          VPzE4XLWvbCPe4aCJ3IzFfoL9k3tWr0W+wy9BeqircQ
                          ==",
            "id" : null,
            "sb_hash" : "bueq5HTO1btpCrXRX7TzEKUrNJQhGG8qBh4wxESqRL3B
                         Bzn4clvK37jYu0KjMMkgJQEMfA1b3imiy79t7h+Yh8w=
                         ="
          },
          "signer_cert_ref" : {
            "ref" : [ "NSuFM/vJ+beBlQtQTzmcYh5x7L8WC9E1KPHRA1ioNOlKVG
                       bla9URzYcsisAx2bcsqOhkvVTc3mK9E6ag07hfaw==" ],
            "type" : "chain_hash"
          },
          "sig_data_ref" : [ {
            "ref" : "0 122935 127937 27430",
            "hash" : "kuUb86FsMNmJl3v4bQK09FkQgvo9Qx01nNRyQKUZihGEumd
                      VqtuBKNPqZI1TzCQew6n8oFMjNhB8C0XMJlkDOQ=="
          } ],
          "time_val" : [ ]
        } ],
        "ext" : {
          "name2" : "val2",
          "name1" : "val1"
        },
        "ver" : "1.0",
        "profile" : "PDF",
        "hash_algo" : "http://www.w3.org/2001/04/xmlenc#sha512"
      }
    }
]]></artwork></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAC+ZkF8AA+19a2/qSLbo9yv5P1hpaW6PJmTzCEnYrZEOCZBAAkl4w/Tc
LWMbcDA28YNHtvb89rvWqiq7DCY76dMzV1c6+/SZgO2qWu9XLReZTEYJrMA2
v6oda+ZoQeiZal+zLUMLLNdRu+7CdBTD1R1tCc8YnjYNMr7mBKbvu07GXweZ
bFaBh+FmPpvPZnLZTD6n6HBh5nq7r6ofGIruOr7p+KH/VQ280FQUa+XRRz/I
Z7OlbF7RPFMDCEw99KxgpyzM3cb1jK9qHRbyHDPIVHBhRfEDzTG+abbrwHqO
q6ysr+o/Alc/VX3XCzxz6sOn3RI//FNRtDCYu95XRc0oKvyzHACgc6Z2BPh0
lSHWCcyp5uzdcr3ZV7WwLUeAqeVruqFNJp65Tt6jGz7AYAZf1Zrr+QvHcmb+
ZOeodcPkM+rw4Ff1IXQM9tU1YO2TfL6gXmZP+KXQCZBwnSp9N5eaZSMZ/f/S
NC3jm/qZ7i6VBE7tM/XODX3b3EkYtUPfT1wmbPrWzLIjmE/Vh4ebBEbJ+wmc
irkLFdjgmP7asm1TbbuaISF1B4wyXOdU7Zcl3PLZ3GU2iVivIyM2ZxD+1xoX
jrBzXG8JArg2gXlqu3aTz+VK/ONV7vKcfyzmr7Li40Uxzz9elAo5/vGymCvG
H6/ijzRZtdupF3KlXDafoQGqyjXhBO+oGbVqm3rguY6lx8rhqyCBIJdTTwPC
hDq79mu1U//rb+qT5+qmQVemrqfegFSTFuEQSancqVo2qh21AjgHmi1NDlNo
XqDmvh4by4QkEmw1YiyCTN+FLuYuMtkiY6DpWaZvOVNXjCAETxDRlgoUUIkE
6jp3Bv+HKwybD5VO/Ta3Rxa4LFmJzs4JtC3BR3j7sMRM7Zuej2DzmfZhzfC/
XHIrZ2oV6GhrCzO6wcS34jqabezf3RveOFPbpjaz9wc3XN9czZP3DlfuuLa7
v6q2tgz5xt6oGmia5fn6fG9czTMNoLK+SN7eG908U1s7kBqQ8OTwpjZzQn/v
5t7gLuDqApFt09sb3Z27S83fv7s3/P5MHVnh3sh7015bTnQjEp1CJnueyeWO
Sc+gcIPCA1xfAaENoDMo7dJ0YhGtdx6fKrV8Unwqrh7CU4G61BxtZtLHTEZ9
AsutTcCgGOL+lLSf7qE25L+qMJmaP8selX5YL4nBZSZ7eQx8eBjBL4DvAWdF
8l6uVDt7JuCzuj8klTa4SvspKn0dWraBOjKxXX3BJmOjJppv2pZjSsM+p+jn
qvpRVS8kVf3pT0D96Q+h/vQfR/08ifrNn4D6zR9C/eZPQv2jiOdlxDOgV9oE
UNF0iKgkjGMw1Lm2NlVNta2lFYCC29bU9FcQH22sYK7CAysYpAauGsxNoN3S
VFcAhGvAd9BbuLiDCNBRJ6a6Zp4L5kC8DRPCuSWgbOBguI2YgsZb+hlYMfOd
EFT9tdPv/lUxzCmNBqMVzC1fRUCsqaWzJ1eeC+YbwDfxj6ObDB7NBxIFPgFL
8GAkBz5YcxQzBXsOSr+rwgJ8SkOd7IAeFLIiLsQgCqA2c0ufS0togaKpK+C9
pYe25sXTqhuw0X6oo6Ochra9k2mj6xDuopAAWQSOqziYoEl1WEFDxIHeZ2rZ
2anTkCZeJyILQjkNL5WzxIdH/alFOCliLC7NsUYeuyGQDVZwTMYqzfbdCF56
EtCfWeCi05dyPQUfArK4ukUoChVBLBjHTP+M1vPD1cpF4qXN5COrb5qdU4xJ
TlGIFPQFwlX4ZwrJ89IyDPD0yi+QMHiuAUqK1Pj+i4Vff3xWyj1zpjF2bEA6
SZ7VNHlW3pPnJtJvCjoGqQB4vIWpWuD5XCCOYU2nKB2kQRFRY+wVCUR3bXqc
45BTqOZWW67AUgHWapcLI2o+RcsYLE6Qc/uCjt8lukMo7qAkCabjcqb3v0HY
w4kNFILsC0XfcUEG1hCko3M+++mChAQqOdkDQbg9+QdyhBrKvo7hLc6Vsk7Z
nqFyzZe+GvqMtOxxmjBV3iB/hHlUyAtnQC/MN0FpISYD46ijSsOsHdNbW6B8
INOogpq3S5A/CWtyvgR0HSauSLzIzIBaow0Au56Q71P18abzRPYSM2D4ftN+
gP91GUshmV2uUILR3uhzoIsJy/kSWFylQfRSsbYcpIsviwlTEXMNQsgIDUKH
dtICsYEvSwjYfAuDLVwEbPZ0t88ltPAaYIQyamE0ZsNsNoChgDaHkP/pQAal
urV8ogFl5KAtmHhzKuCElEGx4Ob7dwqvfvxAiza1YG3MjUCdZTmHh0TO8ePH
KRv+xIc/pQxHIxAPV75/5xEnDkYhpAlu+AQ3KROATUlOwJNIeIyrupA9GIVy
QGihiSD5Rq5IVANL6oOiI0GAbRozwpFh2zfQR4R4Yu5cYN7+Op/XXu6VFGC8
Ow1MNGhT0/O4KfejYTiFNPOZSp4P8AUBWTJJQC+raCu4pgFzLT/y8Kq2xIQe
AZTtAd1egp0gTwMkQUtJ5MPplKO4o8qCJAUgpDPP3SQMH0HFZR1AVtJXRq4T
LQzVnbzAEhxW4cISxttyFHC4uEJCDd53agww8EeQ7YAR3qJ1DVzCaeWCp0Gj
l+KOj2C81HYAE0xlKoAGokYGRvlIHKS+HwcF4G3A1kJ8AKqJbhItgYJuB+AD
OCN+8ghOcBxiHBbvJIxbeuTDQ52joVUq0nFoJQdMqhwwpYZk78VOx+CTYyol
NaZS45gq4bzO1EcWO0ZRoAWWby8GVKQYUPt8LIY8k+IwNY7DFL7u6Z8RiJE8
wVoRxw1MYkBOkIagmyE6RDIwsUgD3EksXBs1JT0+QVPKzAmOV1FFhRVICS1N
DLUcdI10iSOlJPBZIrppirxxQxsuwTPexvLRXII64BSRmUaJxTkUH6Q+8ltq
7Lci8ROhMFuGLN3Ks9YIA9hPlqRpcRhCsi4WAFM15aqB2GtRuEFFDCkbOoOk
kSLAU7CIdmAhgWBxX3YwCkDuol6CdcEQx5OhlSI+CBocDjqRYUJai/wzhMsG
5ZmZartTViRUTtFNgZUBfHAC4d2RkaDitm2tQBpUiJHWLHRAAZ9bXuLp1xAM
c7gEqk7Nw1Q3phPnQoC5oTYDtQIvoBlrxCUymyHJw8rdIKbg7HRvtwK7r9k7
gkNbaRPLtgILk4Na6CGzT1mWeaDgSEXNMPD/LRRVLKQCdRWLBZ5cIUOqSk5B
VlNYLAkywG5uwVcaB34evp8q1jSOG0GpfqmgQaFlIXb5BcyL/4OZbgyece/C
V0+avU735JT9VVuP9Lldfe7V29UKfu7clR8eog/iic7dY+8B7iv8Uzzy5rHZ
rLYqbDBcVfcuNcujE8bEk8enbv2xVX44ER5CiYprGNoyd2jh5srKM4msPvgU
X/esCfMq1zdPf3Em/uq33LlKsRFW4CE2os9Ygv/xQ8EYn63nOmBO2FdKlsDc
mJD7wjxgaJCrKDIQIaIVn7sbR0VHKWxTBBnoA+Oca9vuhuwGZFc+JTsdpqkV
DK4g3+uyhAN1b01xPplmKe0+5n3ImKvBbsVsoGK+hiATNi7PnSG3CRhlmSzK
0CIQGbYQUnsm0M3HBFTkPloUGSksIiPyOtw44SUyBz74eyAIJQMiXrb4ZSyv
xxJ5KkODC4iSCjPXNiLIDbQPls4D8Scwpp42o9RYNdHgU+iHxopolIj1CSAE
GOHBeSCAPmXxhCXhJZEYr51c7wKzrUGmcoIEB0sbELLJuSHaIPCYukT8w7E+
Z6DP0iyKJSkthBXwLgAS03ODEdVc8+e8gsTpwWBR3jFGhNzSBRPEqS3wwnRT
WlMSrFN1gt5W2SNuHLGZgRZDBgGpHWKxKaKwr/6KkP5VhH2yzGq+sgFzy9i9
nz5Lnoa0Ca0eowHcdpjf32MbVUNIsTmrQDhQ2sGTvsGabOk6rISagOJAozDp
odJrIntK8FypVNsZwMY1omnKQQB2IUTeRAVQYOqAp/iotainxE1KmsiY7AWo
jKBJ+8D8i8LtAwE+tTwfU84ApkQ7+04k/P0Xfx38+GDADCCIkkMiXvRZVYBq
DNqKJDcKfJH5UcyZHsZR7sDDbmYcsP4DImHvMJQjg2Qyh2+YK5NMJWPX3NQX
LDQCWZpjacQG+IwdBe+OurI1FnojS/aARbq8R5ha6Ij6F+7PT/lXTirxNZJS
FuLGBFBlAqRhrUSRPoCOcYJFuRunGBVcZBLF4K3YNiGjk6swe48RclSudeMQ
UY4QMaBCpaFQGGwvMZLFDu7M01aQ7aakXe9nc/B8iDFPrJjANYuh4dBCqMzs
MT9WRJbZx7ooQkoFjK0Fdthn8g6cm1iOIYLf2KUlkmXSa566pSY+5PvKauhY
ryHQ2cDaYpTmvZNdks2NnCTSOzJeCQv6/uCotCCXH5hZ1ny5FOqT6z0mLwkt
iSaP5yTR0KjYwKcWpZeD6tw+NDRb2eHpZLwHkEhgRSJ2WI5kgJnGaUoFk1Ja
CXAawOVQjJDSyQjkuJqQRovISKhg+DH5F1w8oNGHsNoHGulHGxJJXEEgFw7G
XQAgFb1NLN+9h4VM+OQSyGQaDUAcxyZSRsClRyE4dtcwU5OMuaQ0MRLOKCTE
CFL1d7DaErRSWtBRWGBPjI0ej9IsKq9GCbQfTnxYFJ/wzL20NC2tpbyOoqfQ
12ag5B2M1OTaAVWslkvgDAZvBJ/Pyz9EsQh+X4HnGecYLphDEQ7cppvO2oLl
6Wk2AavY8kQKtYunUkvXiCUEVUihQgoaFl7Se29uym9WeJeVGTFhdFkdAENd
D2MeQ5FGxLyVltGiNJVv+E3MYIN5+Lu2VknoEYVxMUcYiYWURMWPo3WzxFyJ
6Fzk1ehBmQNVUGZ4Cqgx+045etKfSo6b+Rdy3mTSdjzWA8xZ0VxJuvEEMJF7
4548MhbC2O778ch3sNALAkmX9h0CllBp5Hz4wq79Top6oDgUyipULNLWrmVI
9RaUbR0EGGMaTFHAfxL0gpM/JbpCO7lx0sbY925EwluFWDzi0xcRuDGTAAB5
FgsXNbXReWypA3MiArjGAAK4ZExJaSj2cf34QWv/QkF2d7fCrQRplYwhIkSe
z1F6oduataS8ixsl1Gfuh2H+0D902yzux/lZOhpQrR8SGQI2Wp0iIHaPBIfX
6jHkgUUmVuDhvhPlW9gRaWGLmxhAkQaZ/mu4f3F+bWH29Ik14DobqYr4HRMq
WNfTqKo3YRMiKmcxEo9er13/o5jwJ7AM5qg4z1E2iZ1yXgDpcOk+2M7QcbMF
d8OwPQHszK8nX0/+KnZXcQkC/dMgvwsbTYmtprjZlzqtEy4nuFuQnFYt5DNA
CaF8Fp+B4fXr1HOXaib/fwo5BB//ZnJ/paUe3GOyc2Sdi/MPrHNRYOtcFMQ6
LVBRz9Ir6L8/sxwLGn/GSZ548jlY6A+OxVcJoFzpMpvJ5uC/bjb7lf4bq73u
DcSygWUzfxVpHF7HKOML28IENNlemm1qKzEt0wywgyawMxWbCb+ZRAe8nm3p
VsDJhQGKh389dQr2kSncI9WZ/2IHv93YEHT9ZRb8hkuU2SKsCq3OXdbHown7
wa+T/dVx3E+2ZX71TRMIKVknmujHD8atprZCCBCbdAAoXcbGvQxDZaVBsixF
HeyqRfIew5akNNGKF2vA0fBgIlFo5nAw60CQ4JTpkKiHkGDFjydNaFYRAlyT
TcciWzJIMXqRgYqTodjevlNMOKMYmQZbxGcItfyj1Acf7L+GCNIETMvCDPw9
vH//B4Px93+qmLnRDj6zdhy8jmSnfRY0/P6PWHQqrn4HGSNS7OgU/BmxscG1
FCgWU8PBryTCUpER55jgR+4l4GGSHVGip0ER/6UAm92PRtMg5jHfcdfgcNUb
JuMJZ8rENXbcVNjmisZCFhwZe9ekC7UhaSDn+RJYDF9O0JjXUbClnuBM9coJ
9uJgsoEFSIZxoldKNuJqncZKRfE47ROZMxgqVGNcYQ6MN0BAllg/ZIBEBJeC
y1z+imxv6CStL7IghQZmDLmgdQa3D1UZY+ZyU9B21JM6bjV6n8BbMscJ17xX
M2AmOi744Cq8IM7khu82UHoYWxO2l4vgYrcixb0YcC8J241USBAzHqOKwEui
CmvxLSfc1DtEMdRy8AfoIuxCVNE+7FKCVajxTRM7vT9Bg0ESY6KFBsNEmBBi
MBiBGBvaKPw598uhYWFi/Sm5R3XU+ED+sJU0Owg6QEDdZ7FAgA3jX3YsP+X7
FR5oxcoSwTIXGWzURymLxalZHkXjKQNxZpCp4HfaE8d2iXBF5QK8hGVQvltK
efPKBa8M4wx3FRVlD0aATk+ZYUEMIvsWNWWCXiIUbDOUXcJKqoAlnd58Gkip
IUtj+8MJYjH7jvVy3Q59qdAmcYdTGZWBZzBix40EAmTuo6Jd3a4snoF1QST/
HQLui843vMyb0SyxzYrpLhXxqLbJNYG2SUT3m9wCe2g/kPQgLz5uj2gUxYuy
ZIwYgRIJpvDmMB1VIJgoELc7ECBRI8EyMsIQpOBWP/iQNI4cUO8njAEb/g34
+437KOJR7MHBJca+kCKfPZ5FQWVqeZtPyloiOCVZwh71avFmOZnJje5AjNQm
7to8anv2YBfmp+ViQ3jZeb+tJq0MT5VW0HiPbTnQCIAQS+t7/TDkJrCTQXVw
qxHTM+pUxCfYFeI2svDO3eCFU7alybayNOoX9xXJAYm9T6zIoCTuiGwUkUfh
tRftzpAIEuMlaZVK5zgj9lMxKFRtSo0UUXcPr1Xh8pRfiMW1aAEeujrY6yI1
iCjhauZphljPMTcMeKlthHUWpDSNRFGWFF4xUVMpycDQyprFbMlATJihNIJH
WHv8jkIrLNL6YoNRfquMTU5TkBCl3FV49IO78qEfQJ7GZhe9H+kzCqlPxnPR
5i8riaxZ7pwS1UVhlVCDNXtHjMtVvIlMIk/GnB6PK5B8wJHIXoTakYViFv4k
d5Y9Ia0XfZ/vhGAHMFJ2QxGgGM1KzWS8fKQJ9thS/wcjCS+tRRmM0Gmkq7Nj
hoCQoF5BXmpPMal7Ri5BoH1zhjtU31DkGGppcYXw14x7tKUVN+xE7dXUmWPG
j/AEDiWcx/EUAqBY4iJyFMB5hhZqv16Ab2L++IGKzCepl1tlbvuwEBU7gkOu
/kw4hDkXgVfCijPbzDOxPYrMrLWZtgkfb2elv4ewFyXE6ZPI5TBWEcx831FE
ezhTEZQBZJGRFxtFVJCmXYjERk4kqSJq8k0kUmAegARGALfSNZ/t0u7fTqUo
iCmj6GEVYI+O0cs2Uv8Vl/lESCGix0j+hWKgwTUoZOMvEFi+7pmHW9OoFr9B
2sb9irk/EaHBdJA0TVZNSSJjRRZ6lVqd4Q/5WJX5hC4mEmqeOx9ae3Y/zdIf
ttIcN+4JB5BgqcKNfzflXiyTh1xKk1IlIaV7ssnboD7mGdCReeY0Jdpqi9aZ
d4OtqMEmobVy6kKbK9j+mNia/5gB+WbwnrJDK2IaWF9MNyPJejg3ClIrEFBV
7v+JtraT2+8c6PRutQ8i4JjeN4x00mh8A9ffJbIM8bEdf+pJWjEVp7ZhwQ4W
hMXvw3xoSz/eH38X+Q8yD+T1kHdPlFsmQ/kPc9APbZb4Htly/Mm7eh+CHMPQ
dNAxi/lDgFOOlQBUoBIVwfY1hNqOeCcAj/6l8quURXKLtAJP8rn4JPYm5ac/
y5sc6vkfdS31/59cS6TFx71LpJipqQRahzQns+ckDhxMvHCqj9m/HXNSNtZC
++Erb06JVlaSuymJxO49E8G7yGSDwraz8dwSzuUDiWeZAY6UG1I/6c8s473y
taydUpwMNGMrHhXjzygWMpQCdQIksV98FBwpsleT9DneH/cxOzz5M2BJdAj/
HL4PQMZjMubF3wnKTAPhTFUaQuCPaI1YNT0uS9x8X2Pe85dSx9LxyANsvGhw
PKItlObadtx1rVhH4pQ/GgFGkcnPVEaO9WLdES8Z0TDXS/a57/en/3ejik+K
cjJlToL6p0IG0rwf1xyRaVZaB3iOlZQ+L9EHKx/K9ZFH0qU7fm2cRSms0iIl
H1EvlRxtkWOYkmNgOH5SDGHQT7fhEjMdbp7xbYsZcjbqWfl5nxpH50MC6Jn+
h5QlSb1PwyGcoVzAgXlOnsqdDnufqFauP8An1LiTeqtS7VbbzXqr3K2eyJvy
INzfv8tHabEtqZ+iufRnH7QJS3ztamaKF5QE1Rnu/xOQ/r8ISJNpyhE7hLkD
oHFghaLs59NmaG/ZQyO090AytPyoJUocioL5T1QJ4Q3ZosEsNcRMJFTSe81H
U6pPGjEa/rPNxcRUostd3sz5SX6KE33YUiYDXRG68aasRL/6R9fHhon/3vJs
G1rstNKePV3+Q9B8ON4/7LnYD/sPAfiU/fo3ljsCrpkxiFLFOrXosb+lyOsf
/2OP//P2OFHnO2KOsToH4XVaUJgoIX7aKicXPzTKafflhCXq1xieFbOlROmR
OkbosnJYXAR+WLS/nDi3gpqIpSlE0pB4CCN2RQKBmuKlk3u4yrD3CbBLIRB9
he+G8ez0nY+b8j/PzEa4MJLT5SO7dHyk1AcUx3LYZ3G6t1LcPCpeICbUWdUT
5fWUsSm5MfjBUHeabJz6oNni/XoxOZMGKk0LRQ6WJMwHoOwmOLg3npkSvgbx
9ESfA7gn4iV1xDAVhb1O/QPR99kWKh5xK3q8EndjQEUvFJNOdqyNH2gsTuGH
+KBDNIRTTBz5Q+fIRejJiiNO8dHEcVHpR2XxN2GAYGvLDZM7BxwmQpoYTsSJ
qkXvEkjuWdsjVmKLmjo3aJtUSsOtqMZE5whpKaZFIu/x9w3llzz/LeT/D9Kf
iTrbyFHFmRTRQVehY7N3l2zxun0CXxRzrhMfsINxW5KdPPFPPo4gfs0moU/Y
A0XLHarEmfLEPeQRP4rNgEwZARE8OZzOkGbv7eAQ6YA7LnOw5G9K5N8h19Re
sA8p+Y60b8pwJ/DhBwq8IK+AR9Fj7FQo6UQuOloA38dKHlWDb8KRPxT9JvEu
nGhoDsSbYQoe3+bhKVlRmQkPQ0pAy19oitITCe405AkkJYqtcAS28VGpMOrt
TELF6qqwRuOxU1XvTA0FnrWJv7i+mZnTFalLHBuXEs1sSZ9I07BBskG3RNBJ
b2TT4WEdfihDESGSGiGFL2Um5dCcRy3N8otW1Kd9ov4arlbY0AYGhr2Fodmz
lHn22mgOO2iQOFHcCDPzrtzouRRfHPtV6f2aK9YvEzXLRO/CxUEYHW/n0Mvv
SA3ptMS26Kz5/R/sZByyrr//kwETr5fYAZT7gQRoDFrszeQx9d5zCdDFfdaI
FNMsrusfFgWlxqIjbY1CerhkJARIk2WZYo+9PWnpdkod/cB2Up/JgbxFPCmi
A6bu5yjgwfoXpAyheN9Ejt1PGbDcDjElfA0tz2SnsqDqgsGhGxx+/CMVvn1x
tkhMXiICql5kAL//Eq2oKFXRJSS/O5044IgFLhuLzPvajNM44TyohVcceoNR
bOib8tkyybc6sKWHLysyG0KamiqXlmMtwyVfgLTzDhF2ZTbFOz4VViqPjtuJ
bE2My1n6HO7P/FD8CnPK5lLyvIOD2RNmXmpyoFAjuRgej5WchjNQEkTqZ03u
0sg3E3TNqIO5SZlNymLSAXIMqKgPjDe949vTsNaGTyHODcP+WD4ifk8+vdVN
EAhdksSCcsxr8LPkzCQWV8V7dnJ1Df6bM4qIEzxSG+Lid0uciASckloQIA2E
X3OPHobqeilSI7/llDjLgb02he9eK530UrkMkxZ3ZPNkn0UFfmCuMJXLnakP
LuuVwZ02cVwsO+0t/hoflpfUVNatTbt4trmW/fv7MVYeO+Zt2jVHx42HHYEi
44xRDCAOujty7jQdDGIG/r6ZEiKQeBceViycMTqm7CAmLet7iveewsZBoehZ
EA7hXFqaBzeyAZGbxHgk/t7pL9SIYAq8xVCeU0ieCbPRBBjF4xSQYi0ZMoZS
lCjIyct7C12cqY+TKF6KarjHzBKFJVSePtLBmpTuYO654Sw+J0QuAAkILpMU
T9Vcvh8m6ojsTMvdodc7Ik9XySUSlerUSclPbGMF4V4q3WeU6T2AhOxzM8Qp
JlT4dB855Ci+SOnjL1NY7PSxaB+dYvvoLAciXiLrkg/+YZFUsBdER9XglK18
tFoU+t2IYyXFKYOW5mjg7L+rXXobfgNyh4f7/kAzJ36g6GCQb+p4PmX6ODw6
faLpC5ihvMJzLaztVzDk9EKsv1/64C/KqhBDhPjrAZQWopnEH0vAd0/kEsxh
cqbwMjw7M5MzSz7LPUoaHzAsmXimtog0xDBZ5i9g0Oj0ay7tU/KsmoGsskGs
aAKFT6DxEzU03qMPExKHWWTNz0LopIl2IN6FBQP/r3/9i/1o0a7haYNn69Fq
PI0Hxcb92/Nbq7pyR8542b4tZsf2WH94m++6hfldKzv2DMd+HfWCQWdZG+g9
+5Ymebbna602dp8Hvdx44Z+PBsW18VLrtl5m5/qL8TBa1vz7/Div39bqzYF7
rg0aTqvbaD87i22vVi3RJE+dul932kX9pn5RX6yG/Rv4DgPHO/huN7qtbnVX
d7JnAPHcYBC7xl1782hv1sObks3Qua0F+u3Wfli21pP+Zj0a9hfaoB+O8r1t
3dpY2rD1Vn9xLe2undXvmhcwUH8otArjQduewBiaZLIs2qPCc6jn+3BzPJ/c
2ovRsL3WLYTInhsAYbPbO2++6G/Nyijb6sDETnuFE4+7dfYjU6O3PnwZL8aV
8cvobbwYvczeWreNl1H+edN6GS9bg95u3G1aDzeNN21gTA1AdZhv+aOBHeiA
suAO3NStRzu4rC/757jyxOn7k5uNpedtZ4jQwbVBwbcmw5aDEHQGxfxosF2N
b67f2I9vDIwQwM/pyx6uZpt3QLxlMTe53QDBGzauVl+Mrzu9ba2NRHeu1zhp
fTnPGndlBgkRKm8vHpyYWEk6tfJGbbNGqBCVhyFMcmu/mMiE/HzOISmCMJW3
dSdnCLz1ZX9Zf1ld1p3WapwruaNhy0U0npfzXLtr3zzn7IXe2zrmoFRg3Kk0
nkfLXNh5sxedRS3Q+uNsv1LLPfbHjtYbFR8Hsx0I47O56GUH1e3QWDYqvdte
dtRr3TezNkOnvRyvuxXbaxbaQ/3lenhfMIqPPaDFwN6NctUSCePSXgBkoTHY
+gjtyI6hYyx2+rbe7df71avtyGlvnguNUc+eFfp3q1on1991F6u2VjXuHu9q
N1qlXTCr/a7ebzSb2cbF5KX9wtC5Gz8034zXwbC36eRXre4gcDp2rdYdjK+b
gzrQKLcyu3rRqBjufc52H+90gK5R4vRjv3M0Hjamo3x/Z9RKu/FgZD2CzeSE
ndQXxa7RG7eAg/mOFVjjXsPvDdttgDIYwYSt4YwRtluZD5/f7FqzFzx3ag1Y
3V53FyW/kxvfjZbb+WO/D8GZ/QIsfnseznajZetN75VcDQSif9tkwjbp+cV2
dzwfv5UL2u14brxlS3U7yzT7toda+6Ld1lYTQUwH7xHrUceYnAwLDXtsMbFm
aLhW86a8bb7Ui8233qzZrRceu81CvVIvtCrNDWn2be1NI6kN2M889Qf189Zi
/NbtFYPOcvNmvLStXs/fPPbGXm9g5CdvdtuslLeTRbFj9msP/f5qBdyqGYPc
ou/U2G+8Gb3GQ9e+3g4Wiy0QrNIb9Aut5fn5JDtuaYui+/wyrzRr81ZnufXa
1VL7qZu1pn1CdzUZ9KdsEtAH5MRwSGLPFBDfWF3WArAXSBPQ2M0O0WDXquLa
FulDk9SdsQ0G6KL+Ug2bTEt3k/x4NWFEfW5XR6jdRNRhHsxm/iphIoUWF4yC
HhpvzXBSaDjDm6tdE2gAfzct0F7zNueDF3gBsrqjbm/btBql6fNZZe7dtLfd
bz2a5OrBfL3PXfdKmeI1BER53S86+dyT13l9cipBX7tcbnvBa9dxw8fhS38a
DtpZe9oqv1QXem6Xf2Y/ljcsbvPGsmncrFoPg2Euf9m7G1nl5VXrzRyF7uDV
cLb31u4iNx/n7GzDNpxFMe/Mbr/le62K490wv3Ptlh5nN6Xs4jY/qT1by/F1
YTDrB9VLzfh2V97Uhxsjs67eBRedaX43GNq97uj1OVfZzl4vVt37Z/YLhuG0
qM39u/7OrFjzWcu0tlcZcCG5ZnW9vmv1Vjd6fXi9vbi8rurjTMd7bbv18aL/
WtUHV4X7WnNGk7zeD5aDymx1/vbt5r5ZtAC5/ttmlbtdjx6bF83Cc+9+NFta
rfKF0Rw01kOzMc7c31vFcuZiVn2dskkefWsbjk19rldc51vBab5VzdZ1p1Eb
9i7d+WK9rTdapYdhq1bevpW7+d6y3Nl6D6XNWntuLht3I5qkCdlPZt3zH58G
uv+avTTvH4sTxx9tPL9kzUamG8z07reWfXneXk5LYXNnfqvPdm9251vr4eF8
+0qTlMra9OLhaTgYZzvfVnY4W0/f1pd34duw9Tgqlc7X7uuV/7h6LG3vR/PX
kfM2MSq1+x5FFUqFhzZYJmXVVCne+C5+0WlhGSfqV/Xk0XTqfzsvnDfmk/W0
4gTT/u9frrzH7e1lbbHevWj3/YbWf63XrofuvD8vm8Xp/ZXmRD/7xv+561zn
4urKu7yfaPbfpuuVdpd7ubIms2L++XqXe3r++99PTsXSwW5FS2O9NLqo2TO6
2O4Uc3n2q1U/DvFhG9Fp+Gghw2ceBKuvX77wuA5//PGLOMogF68GoWP0tA+P
+xDJ4WaQ4+Brbr75hYdtrieN0QIckyte5S8L2YvzYnTnJbBoNjOf14sT88Iw
LnT9wphcFc4num5kLy6mRTNvFuK5kjVKHPw9IinexCv/kK7BVUhS8CoezHIq
X+dTHY6Ae0ufEbXusBA1yglOTpMPHpkc7uBviOEUvHdv7y5kazLVLePsgJL+
Ovji03vJGZbbfdkXHvaPdvK+ZPmPPLJ/P9R/HuAKCWWSXtEdTIQJmut5WC1d
34yM14fZzt3Y+afJ0rkvGY3y0uoH3VxY6s+sWqk0z8/TYaF//ae36vnwYQDB
2JN5rt00CvW32tR9KC0KwcDLDv622ZWuzVfL05/fmUUSfA4qU7wUUvO2d0Jh
EpqvxbvuY24SrG68YXt42X2r3ve8VuN5fnt79Xo9P99sq53X9kPh+vjq12/O
uW6v7wuXL6Mwe//SbC5mjedqc1rOTQrW0tpdloLL+d9G86vN34/P8vcES/YZ
Imf6KYzhV/+hnrQ6Ya35Zd3428S8tp+D5+7bUh/Ni9vLh6vBTamau3+6a5dz
ltt6tO/7t8fAmdhaqdd+G+m+5Ze3+QkY2UewzRDZFZb3peqFNstezqfaBuie
FB5meEyibrxr/C5qUQ0lVbn49ZMs/hxeqVCEP5elwqWavzwvZPeZHjF2EfYm
Vxc1v9laNuzC+nzyfJ8t1RbPs7Vbet5mc06rvXu+742t+W01XBpHyNB/DcLr
+9bT67ie677dPJubC+fKrTVfWvPrq5vssNmwF5VHtLrvaJNom2TY/VNJfU6Y
hoQtwr3FPKEDw/MJXOleTtyTtFmi7skaD+75yl6oly7zajDdgkRevhXtB8nm
ZrPZnG0KZ643+5LPZnNfsudftksbrM8v/lyL3Ag6Eva/6DT+1/8FsozbNKF6
AAA=

-->

</rfc>

