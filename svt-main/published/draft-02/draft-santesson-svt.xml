<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.14 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC6931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6931.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7518 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-santesson-svt-02" category="info" consensus="true">

  <front>
    <title>Signature Validation Token</title>

    <author initials="S." surname="Santesson" fullname="Stefan Santesson">
      <organization abbrev="IDsec Solutions">IDsec Solutions AB</organization>
      <address>
        <postal>
          <street>Forskningsbyn Ideon</street>
          <city>Lund</city>
          <code>223 70</code>
          <country>SE</country>
        </postal>
        <email>sts@aaa-sec.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>516 Dranesville Road</street>
          <city>Herndon, VA</city>
          <code>20170</code>
          <country>US</country>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>

    <date year="2021" month="September" day="03"/>

    <area>Security</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Electronic signatures have a limited lifespan with respect to the time period that they
can be validated and determined to be authentic. The Signature Validation Token (SVT)
defined in this specification provides evidence that asserts the validity of an
electronic signature. The SVT is provided by a trusted authority, which asserts that
a particular signature was successfully validated according to defined procedures at
a certain time. Any future validation of that electronic signature can be satisfied by
validating the SVT without any need to also validate the original electronic signature or
the associated digital certificates. SVT supports electronic signatures in CMS, XML, and
PDF documents.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>Electronic signatures have a limited lifespan regarding when they can be validated
and determined to be authentic. Many factors make it more difficult to validate
electronic signatures over time. For example:</t>

<t><list style="symbols">
  <t>Trusted information about the validity of the certificate containing the signer’s public key is not available.</t>
  <t>Trusted information about the date and time when the signature was actually created is not available.</t>
  <t>Algorithms used to create the electronic signature are no longer considered secure.</t>
  <t>Services necessary to validate the signature are no longer available.</t>
  <t>Supporting evidence such as CA certificates, OCSP responses, CRLs, or timestamps.</t>
</list></t>

<t>The challenges to validation of an electronic signature increases over time, and
eventually it is simply impossible to verify the signature with a sufficient level of
assurance.</t>

<t>Existing standards, such as the ETSI XAdES <xref target="XADES"/> profile for XML
signatures <xref target="XMLDSIG11"/>, ETSI PAdES <xref target="PADES"/> profile for PDF signatures
<xref target="ISOPDF2"/>, and ETSI CAdES <xref target="CADES"/> profile for CMS signatures
<xref target="RFC5652"/> can be used to prolong the lifetime of a signature by
storing data that supports validation of the electronic signature beyond
the lifetime of the certificate containing the signer’s public key, which
is often referred to as the signing certificate.  The problem with this
approach is that the amount of information that must be stored along with
the electronic signature constantly grows over time.  The increasing
amount of information and signed objects that need to be validated in
order to verify the original electronic signature grows in complexity to
the point where validation of the electronic signature may become
infeasible.</t>

<t>The Signature Validation Token (SVT) defined in this specification takes a fundamentally
different approach to the problem by providing evidence by a trusted authority that
asserts the validity of an electronic signature. The SVT asserts that a particular
electronic signature was successfully validated  by a trusted authority according to
defined procedures at a certain date and time. Once the SVT is issued by a trusted
authority, any future validation of that electronic signature is satisfied by validating
the SVT, without any need to also validate the original electronic signature.</t>

<t>This approach drastically reduces the complexity of validation of older electronic
signatures for the simple reason that validating the SVT eliminates the need to
validate the many signed objects that would otherwise been needed to provide the
same level of assurance. The SVT can be signed with private keys and algorithms that
provide confidence for a considerable time period. In fact, multiple SVTs can be used
to offer greater assurance. For example, one SVT could be produced with a large RSA
private key, a second one with a strong elliptic curve, and a third one with a quantum
safe digital signature algorithm to protect against advances in computing power and
cryptanalytic capabilities. Further, the trusted authority can add additional SVTs
in the future using fresh private keys and signatures to extend the lifetime of the,
if necessary.</t>

</section>
<section anchor="defs" title="Definitions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document use the following terms:</t>

<t><list style="symbols">
  <t>Signed Data – The data covered by a particular electronic signature. This is typically
equivalent to the signed content of a document, and it represents the data that the
signer intended to sign. In some cases, such as in some XML signatures, the signed data
can be the collection of several data fragments each referenced by the signature. In the
case of PDF, this is the data covered by the “ByteRange” parameter in the signature
dictionary.</t>
  <t>Signed Bytes – These are the actual bytes of data that were hashed and signed by the
digital signature algorithm. In most cases, this is not the actual Signed Data, but a
collection of signature metadata that includes references (hash) of the Signed Data as
well as information about algorithms and other data bound to a signature. In XML, this
is the canonicalized SignedInfo element. In CMS and PDF signatures, this is the
DER-encoded SignedAttributes structure.</t>
</list></t>

<t>When these terms are used as defined in this section, they appear with a
capitalized first letter.</t>

</section>
<section anchor="svt" title="Signature Validation Token">

<t>The Signature Validation Token (SVT) is created by a trusted service to capture
evidence of successful electronic signature verification, and then relying
parties can depend on the checking that has already taken place by the
trusted service.</t>

<section anchor="svt-function" title="Signature Validation Token Function">

<t>The function of the SVT is to capture evidence of electronic signature
validity at one instance of secure signature validation process and to
use that evidence to eliminate the need to perform any repeated
cryptographic validation of the original electronic signature value, as
well as reliance on any hash values bound to that signature.  The SVT
achieves this by binding the following information to a specific
electronic signature:</t>

<t><list style="symbols">
  <t>A unique identification of the electronic signature.</t>
  <t>The data and metadata signed by the electronic signature.</t>
  <t>The signer’s certificate that was validated as part of electronic signature verification.</t>
  <t>The certification path that was used to validate the signer’s certificate.</t>
  <t>An assertion providing evidence of that the signature was verified, the date and time the verification was performed, the procedures used to verify the electronic signature, and the outcome of the verification.</t>
  <t>An assertion providing evidence of the date and time at which the signature is known to have existed, the procedures used to validate the date and time of existence, and the outcome of the validation.</t>
</list></t>

<t>Using an SVT is equivalent to validating a signed document in a system once, and then
using that document multiple times without subsequent revalidating the electronic
signature for each usage. Such procedures are common in systems where the document is
residing in a safe and trusted environment where it is protected against modification. The
SVT allows the safe and trusted environment to expand beyond a locally controlled
environment, and the SVT allows a greater period between original electronic signature
verification and subsequent usage.</t>

<t>Using the SVT, the electronic signature verification of a document can be take place
once using a reliable trusted service, and then any relying party that is able to
depend on the verification process already performed by the trusted service. The SVT
is therefore not only a valuable tool to extend the lifetime of a signed document, but
also avoids the need for careful integration between electronic signature verification
and document usage.</t>

</section>
<section anchor="svt-syntax" title="Signature Validation Token Syntax">

<t>The SVT is carried in a JSON Web Token (JWT) as defined in <xref target="RFC7519"/>.</t>

<section anchor="svt-syntax-dt" title="Data Types">

<t>The contents of claims in an SVT are specified using the following data types:</t>

<t><list style="symbols">
  <t>String – JSON Data Type of string that contains an arbitrary case sensitive string value.</t>
  <t>Base64Binary – JSON Data Type of string that contains of Base64 encoded byte array of binary data.</t>
  <t>StringOrURI – JSON Data Type of string that contains an arbitrary string or an URI as defined in <xref target="RFC7519"/>, which REQUIRES a value containing the colon character (“:”) to be a URI.</t>
  <t>URI – JSON Data Type of string that contains an URI as defined in <xref target="RFC7519"/>.</t>
  <t>Integer – JSON Data Type of number that contains a 32-bit signed integer value (from -2^31 to 2^31-1).</t>
  <t>Long – JSON Data Type of number that contains a 64-bit signed integer value (from -2^63 to 2^63-1).</t>
  <t>NumericDate – JSON Data Type of number that contains a data as defined in <xref target="RFC7519"/>, which is the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.</t>
  <t>Boolean – JSON Data Type of boolean that contains explicit value of true or false.</t>
  <t>Object&lt;Class&gt; – A JSON object holding a claims object of a class defined in this specification (see <xref target="svt-syntax-claim"/>).</t>
  <t>Map&lt;Type&gt; – A JSON object with name-value pairs where the value is an object of the specified Type in the notation. For example, Map&lt;String&gt; is a JSON object with name value pairs where all values are of type String.</t>
  <t>Array – A JSON array of a specific data type as defined in this section. An array is expressed in this specification by square brackets. For example, [String] indicates an array of String values, and [Object&lt;DocHash&gt;] indicates an array of DocHash objects.</t>
  <t>Null – A JSON null that represents an absent value. A claim with a null value is equivalent with an absent claim.</t>
</list></t>

</section>
<section anchor="svt-syntax-claim" title="Signature Validation Token JWT Claims">

<t>The SVT MUST contain only JWT claims in the following list:</t>

<t><list style="symbols">
  <t>jti – A String data type that is a “JWT ID” registered claim according to <xref target="RFC7519"/>. It is RECOMMENDED that the identifier holds a hexadecimal string representation of a 128-bit unsigned integer. A SVT MUST contain one “JWT ID” claim.</t>
  <t>iss  – A StringOrURI data type that is an “Issuer” registered claim according to <xref target="RFC7519"/>, which is an arbitrary unique identifier of the SVT issuer. This value SHOULD have the value of an URI based on a domain owned by the issuer. A SVT MUST contain one “Issuer” claim.</t>
  <t>iat – A NumericDate data type that is an “Issued At” registered claim according to <xref target="RFC7519"/>, which expresses the date and time when this SVT was issued. A SVT MUST contain one “Issued At” claim.</t>
  <t>aud – A [StringOrURI] data type or a StringOrURI data type that is an “Audience” registered claim according to <xref target="RFC7519"/>. The audience claim is an array of one or more identifiers, identifying intended recipients of the SVT. Each identifier MAY identify a single entity, a group of entities or a common policy adopted by a group of entities. If only one value is provided it MAY be provided as a single StringOrURI data type value instead of as an array of values. Inclusion of the “Audience” claim in a SVT is OPTIONAL.</t>
  <t>exp – A NumericDate data type that is an “Expiration Time” registered claim according to <xref target="RFC7519"/>, which expresses the date and time when services and responsibilities related to this SVT is no longer provided by the SVT issuer. The precise meaning of the expiration time claim is defined by local policies. See implementation note below. Inclusion of the “Expiration Time” claim in a SVT is OPTIONAL.</t>
  <t>sig_val_claims – A Object&lt;SigValidation&gt; data type that contains signature validation claims for this SVT extending the standard registered JTW claims above. A SVT MUST contain one sig_val_claims claim.</t>
</list></t>

<t>Note: An SVT asserts that a particular validation process was undertaken at a stated
date and time. This fact never changes and never expires. However, some other aspects
of the SVT such as liability for false claims or service provision related to a specific
SVT may expire after a certain period of time, such as a service where an old SVT can be
upgraded to a new SVT signed with fresh keys and algorithms.</t>

</section>
<section anchor="sigvalidation-obj-class" title="SigValidation Object Class">

<t>The sig_val_claims JWT claim uses the SigValidation object class. A SigValidation object
holds all custom claims, and a SigValidation object contains the following parameters:</t>

<t><list style="symbols">
  <t>ver – A String data type representing the version. This parameter MUST be present, and the version in this specification indicated by the value “1.0”.</t>
  <t>profile – A StringOrURI data type representing the name of a profile that defines conventions followed for specific claims and any extension points used by the SVT issuer. Inclusion of this parameter is OPTIONAL.</t>
  <t>hash_algo – A URI data type that identifies the hash algorithm used to compute the hash values within the SVT. The URI identifier MUST be one defined in <xref target="RFC6931"/> or in the IANA registry defined by this specification. This parameter MUST be present.</t>
  <t>sig – A [Object&lt;Signature&gt;] data type that gives information about validated electronic signatures as an array of Signature objects. If the SVT contains signature validation evidence for more than one signature, then each signature is represented by a separate Signature object. At least one Signature object MUST be present.</t>
  <t>ext – A Map&lt;String&gt; data type that provides additional claims related to the SVT. Extension claims are added at the discretion of the SVT issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="signature-obj-class" title="Signature Claims Object Class">

<t>The sig parameter in the SigValidation object class uses the Signature object
class. The Signature object contains claims related to signature validation
evidence for one signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>sig_ref – A Object&lt;SigReference&gt; data type that contains reference information identifying the target signature. This parameter MUST be present.</t>
  <t>sig_data – A [Object&lt;SignedData&gt;] data type that contains an array of references to Signed Data that was signed by the target electronic signature.  This parameter MUST be present.</t>
  <t>signer_cert_ref – A Object&lt;CertReference&gt; data type that references the signer’s certificate and optionally reference to a supporting certification path that was used to verify the target electronic signature. This parameter MUST be present.</t>
  <t>sig_val – A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of signature verification according to defined procedures. This parameter MUST be present.</t>
  <t>time_val – A [Object&lt;TimeValidation&gt;] data type that contains an array of time verification results that the target signature has existed at a specific date and time in the past. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="sigreference-obj-class" title="SigReference Claims Object Class">

<t>The sig_ref parameter in the Signature object class uses the SigReference object
class. The SigReference object provides information used to match the Signature
claims object to a specific target electronic signature and to verify the integrity
of the target signature value and Signed Bytes, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>id – A String data type that contains an identifier assigned to the target signature. Inclusion of this parameter is OPTIONAL.</t>
  <t>sig_hash – A Base64Binary data type that contains a hash value of the target electronic signature value. This parameter MUST be present.</t>
  <t>sb_hash – A Base64Binary data type that contains a hash value of the Signed Bytes of the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="signeddata-obj-class" title="SignedData Claims Object Class">

<t>The sig_data parameter in the Signature object class uses the SignedData object
class. The SignedData object provides information used to verify the target electronic
signature references to Signed Data as well as to verify the integrity of all data that
is signed by the target signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>ref – A String data type that contains a reference identifier for the data or data fragment covered by the target electronic signature. This parameter MUST be present.</t>
  <t>hash – A Base64Binary data type that contains the hash value for the data covered by the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="policyval-obj-class" title="PolicyValidation Claims Object Class">

<t>The sig_val parameter in the Signature object class uses the PolicyValidation object
class. The PolicyValidation object provides information about the result of a validation
process according to a spefific policy, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>pol – A StringOrURI data type that contains the identifier of the policy governing the electronic signature verification process. This parameter MUST be present.</t>
  <t>res – A String data type that contains the result of the electronic signature verification process. The value MUST be one of “PASSED”, “FAILED” or “INDETERMINATE” as defined by <xref target="ETSI319102-1"/>. This parameter MUST be present.</t>
  <t>msg – A String data type that contains a message describing the result. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="timever-obj-class" title="TimeValidation Claims Object Class">

<t>The time_val parameter in the Signature object class uses the TimeValidation object
class. The TimeValidation claims object provides information about the result of
validating time evidence asserting that the target signature existed at a particular
date and time in the past, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>time – A NumericDate data type that contains the verified time. This parameter MUST be present.</t>
  <t>type – A StringOrURI data type that contains an identifier of the type of evidence of time. This parameter MUST be present.</t>
  <t>iss – A StringOrURI data type that contains an identifier of the entity that issued the evidence of time. This parameter MUST be present.</t>
  <t>id – A String data type that contains an unique identifier assigned to the evidence of time.  Inclusion of this parameter is OPTIONAL.</t>
  <t>val – A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of the time evidence validation according to defined validation procedures. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="certref-obj-class" title="CertReference Claims Object Class">

<t>The signer_cert_ref parameter in the Signature object class uses the CertReference object
class. The CertReference object references a single X.509 certificate or a X.509
certification path, either by providing the certificate data or by providing hash
references for certificates that can be located in the target electronic signature, and
it contains the following parameters:</t>

<t><list style="symbols">
  <t>type – A StringOrURI data type that contains an identifier of the type of reference. The type identifier MUST be one of the identifiers defined below, an identifier specified by the selected profile, or a URI identifier. This parameter MUST be present.</t>
  <t>ref – A [String] data type that contains an array of string parameters according to conventions defined by the type identifier. This parameter MUST be present.</t>
</list></t>

<t>The following type identifiers are defined:</t>

<t><list style="symbols">
  <t>chain – The ref contains an array of Base64 encoded X.509 certificates <xref target="RFC5280"/>. The certificates MUST be provided in the order starting with the end entity certificate. Any following certificate must be able to validate the signature on the previous certificate in the array.</t>
  <t>chain_hash – The ref contains an array of one or more Base64 encoded hash values where each hash value is a hash over a X.509 certificate <xref target="RFC5280"/> used to validate the signature.  The certificates MUST be provided in the order starting with the end entity certificate.  Any following certificate must be able to validate the signature on the previous certificate in the array. This option MUST NOT be used unless all hashed certificates are present in the target electronic signature.</t>
</list></t>

<t>Note: All certificates referenced using the identifiers above are X.509 certificates.
Profiles of this specification MAY define alternative types of public key containers;
however, a major function of these referenced certificates is not just to reference
the public key, but also to provide the subject name of the signer. It is therefore
important for the full function of an SVT that the referenced public key container also
provides the means to identify of the signer.</t>

</section>
<section anchor="svt-jose-header" title="SVT JOSE Header">

<t>The SVT JWT MUST contain the following JOSE header parameters in accordance with
Section 5 of <xref target="RFC7519"/>:</t>

<t><list style="symbols">
  <t>typ – This parameter MUST have the string value “JWT” (upper case).</t>
  <t>alg – This parameter identifies the algorithm used to sign the SVT JWT. The algorithm identifier MUST be specified in <xref target="RFC7518"/> or the IANA JSON Web Signature and Encryption Algorithms Registry [ add a ref ]. The specified signature hash algorithm MUST be identical to the hash algorithm specified in the hash_algo parameter of the SigValidation object within the sig_val_claims claim.</t>
</list></t>

<t>The SVT header MUST contain a public key or a reference to a public key used to verify the signature on the SVT in accordance with <xref target="RFC7515"/>. Each profile, as discussed in <xref target="profiles"/>, MUST define the requirements for how the key or key reference is included in the header.</t>

</section>
</section>
</section>
<section anchor="profiles" title="Profiles">

<t>Each signed document and signature type will have to define the precise content and
use of several claims in the SVT.</t>

<t>Each profile MUST as a minimum define:</t>

<t><list style="symbols">
  <t>How to reference the Signed Data content of the signed document.</t>
  <t>How to reference to the target electronic signature and the Signed Bytes of the signature.</t>
  <t>How to reference certificates supporting each electronic siganture.</t>
  <t>How to include public keys or references to public keys in the SVT.</t>
  <t>Whether each electronic signature is supported by a single SVT, or whether one SVT may support multiple electronic signatures of the same document.</t>
</list></t>

<t>A profile MAY also define:</t>

<t><list style="symbols">
  <t>Explicit information on how to perform signature validation based on an SVT.</t>
  <t>How to attach an SVT to an electronic signature or signed document.</t>
</list></t>

</section>
<section anchor="signature-verification-with-a-svt" title="Signature Verification with a SVT">

<t>Signature verification based on an a SVT MUST follow these steps:</t>

<t><list style="numbers">
  <t>Locate all available SVTs available for the signed document that are relevant for the target electronic signature.</t>
  <t>Select the most recent SVT that can be successfully validated and meets the requirement of the relying party.</t>
  <t>Verify the integrity of the signature and the Signed Bytes of the target electronic signature using the sig_ref claim.</t>
  <t>Verify that the Signed Data reference in the original electronic signature matches the reference values in the sig_data_ref claim.</t>
  <t>Verify the integrity of referenced Signed Data using provided hash values in the sig_data_ref claim.</t>
  <t>Obtain the verified certificates supporting the asserted electronic signature verification through the signer_cert_ref claim.</t>
  <t>Verify that signature validation policy results satisfy the requirements of the relying party.</t>
  <t>Verify that verified time results satisfy the context for the use of the signed document.</t>
</list></t>

<t>After successfully performing these steps, signature validity is established as well as
the trusted signer certificate binding the identity of the signer to the electronic
signature.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<section anchor="claim-names-reg" title="Claim Names Registration">

<t>This section registers the “sig_val_claims” claim name in the IANA “JSON Web Token Claims” registry established by Section 10.1 in <xref target="RFC7519"/>.</t>

<section anchor="clname-reg-contents" title="Registry Contents">

<t><list style="symbols">
  <t>Claim Name: “sig_val_claims”</t>
  <t>Claim Description: Signature Validation Token</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="sigvalidation-obj-class"/> of {this document}</t>
</list></t>

<t>NOTE to RFC editor: Please replace {this document} with its assigned RFC number.</t>

</section>
</section>
</section>
<section anchor="seccons" title="Security Considerations">

<section anchor="seccon-lvl-of-reliance" title="Level of reliance">

<t>An SVT allows a signature verifier to still validate the original signature using
the original signature data and to use the information in the SVT selectively to
either just confirm the validity and integrity of the original data, such as confirming the integrity of signed data or the validity of the signer’s certificate etc.</t>

<t>Another way to use an SVT is to completely rely on the validation conclusion provided
by the SVT and to omit re-validation of the original signature value and original
certificate status checking data.</t>

<t>This choice is a decision made by the verifier according to its own policy and risk assessment.</t>

<t>However, even when relying on the SVT validation conclusion of an SVT it is vital to still verify that
the present SVT is correctly associated with the document and signature that is being validated by
validating the hashed reference data in the SVT of the signature, signing certificate chain,
signed data and the signed bytes.</t>

</section>
<section anchor="seccon-aging-algos" title="Aging algorithms">

<t>Even if the SVT provides protection against algorithms becoming weakened or broken over time, this protection is only valid for as long as the algorithms used to sign the SVT are still considered secure. It is advisable to re-issue SVT in cases where an algorithm protecting the SVT is getting close to its end of life.</t>

<t>One way to increase the resistance of algorithms becoming insecure, is to issue multiple SVT for the same signature with different algorithms and key lengths where one algorithm could still be secure even if the corresponding algorithm used in the alternative SVT is broken.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC8174;
&RFC5280;
&RFC5652;
&RFC6931;
&RFC7515;
&RFC7518;
&RFC7519;
<reference anchor="ETSI319102-1" >
  <front>
    <title>ETSI - Electronic Signatures and Infrastructures (ESI); Procedures for Creation and Validation of AdES Digital Signatures; Part 1: Creation and Validation</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="May"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 102-1 v1.1.1"/>
</reference>
<reference anchor="XMLDSIG11" >
  <front>
    <title>XML Signature Syntax and Processing Version 1.1</title>
    <author initials="D." surname="Eastlake" fullname="Donald Eastlake">
      <organization></organization>
    </author>
    <author initials="J." surname="Reagle" fullname="Joseph Reagle">
      <organization></organization>
    </author>
    <author initials="D." surname="Solo" fullname="David Solo">
      <organization></organization>
    </author>
    <author initials="F." surname="Hirsch" fullname="Frederick Hirsch">
      <organization></organization>
    </author>
    <author initials="M." surname="Nystrom" fullname="Magnus Nystrom">
      <organization></organization>
    </author>
    <author initials="T." surname="Roessler" fullname="Thomas Roessler">
      <organization></organization>
    </author>
    <author initials="K." surname="Yiu" fullname="Kelvin Yiu">
      <organization></organization>
    </author>
    <date year="2013" month="April" day="11"/>
  </front>
  <seriesInfo name="W3C" value="Proposed Recommendation"/>
</reference>
<reference anchor="ISOPDF2" >
  <front>
    <title>Document management -- Portable document format -- Part 2: PDF 2.0</title>
    <author >
      <organization>ISO</organization>
    </author>
    <date year="2017" month="July"/>
  </front>
  <seriesInfo name="ISO" value="32000-2"/>
</reference>
<reference anchor="XADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); XAdES digital signatures; Part 1: Building blocks and XAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 132-1 v1.1.1"/>
</reference>
<reference anchor="PADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); PAdES digital signatures; Part 1: Building blocks and PAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 142-1 v1.1.1"/>
</reference>
<reference anchor="CADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); CAdES digital signatures; Part 1: Building blocks and CAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 122-1 v1.1.1"/>
</reference>


    </references>



<section anchor="appendix-examples" title="Appendix: Examples">

<t>The following example illustrates a basic SVT according to this specification
issued for a signed PDF document.</t>

<t>Note: Line breaks in the decoded example are inserted for readablilty. Line
breaks are not allowed in valid JSON data.</t>

<t>Signature validation token JWT:</t>

<figure><artwork><![CDATA[
eyJraWQiOiJPZW5JKzQzNEpoYnZmRG50ZlZcLzhyT3hHN0ZrdnlqYUtWSmFWcUlG
QlhvaFZoQWU1Zks4YW5vdjFTNjg4cjdLYmFsK2Z2cGFIMWo4aWJnNTJRQnkxUFE9
PSIsInR5cCI6IkpXVCIsImFsZyI6IlJTNTEyIn0.eyJhdWQiOiJodHRwOlwvXC9l
eGFtcGxlLmNvbVwvYXVkaWVuY2UxIiwiaXNzIjoiaHR0cHM6XC9cL3N3ZWRlbmNv
bm5lY3Quc2VcL3ZhbGlkYXRvciIsImlhdCI6MTYwMzQ1ODQyMSwianRpIjoiNGQx
Mzk2ZjFmZjcyOGY0MGQ1MjQwM2I2MWM1NzQ0ODYiLCJzaWdfdmFsX2NsYWltcyI6
eyJzaWciOlt7ImV4dCI6bnVsbCwic2lnX3ZhbCI6W3sibXNnIjoiT0siLCJleHQi
Om51bGwsInJlcyI6IlBBU1NFRCIsInBvbCI6Imh0dHA6XC9cL2lkLnN3ZWRlbmNv
bm5lY3Quc2VcL3N2dFwvc2lndmFsLXBvbGljeVwvdHMtcGtpeFwvMDEifV0sInNp
Z19yZWYiOnsic2lnX2hhc2giOiJ5Y2VQVkxJemRjcEs5N0lZT2hGSWYxbnk3OUht
SUNiU1Z6SWVaTmJpem83ckdJd0hOTjB6WElTeUtHakN2bm9uT2FRR2ZMXC9QM3ZE
dEI4OHlLU1dlWGc9PSIsImlkIjoiaWQtNzM5ODljNmZjMDYzNjM2YWI1ZTc1M2Yx
MGY3NTc0NjciLCJzYl9oYXNoIjoiQm9QVjRXQ0E5c0FJYWhqSzFIYWpmRnhpK0F6
QzRKR1R1ZjM5VzNaV2pjekRDVVJ4ZGM5WWV0ZUh0Y3hHVmVnZ3B4SEo3NVwvY1E3
SE4xZERkbGl5SXdnPT0ifSwic2lnbmVyX2NlcnRfcmVmIjp7InJlZiI6WyIxK2Fh
SmV0ZzdyZWxFUmxVRFlFaVU0WklaaFQ0UlV2aUlRWnVLN28xR0ZLYVRQUTZ5K2t4
XC9QTnREcnB1cVE2WGZya0g5d1lESzRleTB5NFdyTkVybnc9PSIsImg0UER4YjVa
S214MWVUU3F2VnZZRzhnMzNzMDVKendCK05nRUhGVTRnYzl0cUcwa2dIa2Y2VzNv
THprVHd3dXJJaDZZOUFhZlpZcWMyelAycEUycDRRPT0iLCJEZDJDNXNCMElPUWVN
Vm5FQmtNNVE5Vzk2bUJITnd3YTJ0elhNcytMd3VZY09VdlBrcnlHUjBhUEc4Tzlu
SVAzbGJ3NktqUTFoRG1SazZ6Qzh4MmpkZz09Il0sInR5cGUiOiJjaGFpbl9oYXNo
In0sInNpZ19kYXRhX3JlZiI6W3sicmVmIjoiIiwiaGFzaCI6IkZjR3BPT2Y4aWxj
UHQyMUdEZDJjR25MR0R4UlM1ajdzdk00YXBwMkg0MWRERUxtMkN6Y2VUWTAybmRl
SmZXamludG1RMzc2SWxYVE9BcjMxeXpZenNnPT0ifSx7InJlZiI6IiN4YWRlcy0x
MWExNTVkOTJiZjU1Nzc0NjEzYmI3YjY2MTQ3N2NmZCIsImhhc2giOiJLUmtnYlo2
UFwvbmhVNjNJTWswR2lVZlVcL0RUd3ZlWWl0ZVFrd0dlSnFDNUJ6VE5WOGJRYnBl
ZFRUdVdKUHhxdkowUlk4NGh3bTdlWVwvZzBIckFPZWdLdz09In1dLCJ0aW1lX3Zh
bCI6W119XSwiZXh0IjpudWxsLCJ2ZXIiOiIxLjAiLCJwcm9maWxlIjoiWE1MIiwi
aGFzaF9hbGdvIjoiaHR0cDpcL1wvd3d3LnczLm9yZ1wvMjAwMVwvMDRcL3htbGVu
YyNzaGE1MTIifX0.TdHCoIUSZj2zMINKg7E44-8VE_mJq6TG1OoPwnYSs_hyUbuX
mrLJpuk8GR5YrndeOucPUYAwPxHt_f68JIQyFTi0agO9VJjn1R7Pj3Jt6WG9pYVN
n5LH-D1maxD11ZxxbcYeHbsstd2Sy2uMa3BdpsstGdPymSmc6GxY5uJoL0-5vwo_
3l-4Bb3LCTiuxYPcmztKIbDy2hEgJ3Hx1K4HF0SHgn3InpqBev3hm2SLw3hH5BCM
rywBAhHYE6OGE0aOJ6ktA5UP0jIIHfaw9i1wIiJtHTaGuvtyWSLk5cshmun9Hkdk
kRTA75bzuq0Iyd0qh070rA8Gje-s4Tw4xzttgKx1KSkvy8n5FqvzWdsZvclCG2mY
Y9rMxh_7607NXcxajAP4yDOoKNs5nm937ULe0vCN8a7WTrFuiaGjry7HhzRM4C5A
qxbDOBXPLyoMr4qn4LRJCHxOeLZ6o3ugvDOOWsyjk3eliyBwDu8qJH7UmyicLxDc
Cr0hUK_kvREqjD2Z
]]></artwork></figure>

<t>Decoded JWT Header:</t>

<figure><artwork><![CDATA[
{
  "kid":"OenI+434JhbvfDntfV\/8rOxG7FkvyjaKVJaVqIFBXohVhAe5fK8anov
         1S688r7Kbal+fvpaH1j8ibg52QBy1PQ==",
  "typ":"JWT",
  "alg":"RS512"
}
]]></artwork></figure>

<t>Decoded JWT Claims:</t>

<figure><artwork><![CDATA[
{
  "aud" : "http://example.com/audience1",
  "iss" : "https://swedenconnect.se/validator",
  "iat" : 1603458421,
  "jti" : "4d1396f1ff728f40d52403b61c574486",
  "sig_val_claims" : {
    "sig" : [ {
      "ext" : null,
      "sig_val" : [ {
        "msg" : "OK",
        "ext" : null,
        "res" : "PASSED",
        "pol" : "http://id.swedenconnect.se/svt/sigval-policy/
                 ts-pkix/01"
      } ],
      "sig_ref" : {
        "sig_hash" : "ycePVLIzdcpK97IYOhFIf1ny79HmICbSVzIeZNbizo7rGIw
                      HNN0zXISyKGjCvnonOaQGfL/P3vDtB88yKSWeXg==",
        "id" : "id-73989c6fc063636ab5e753f10f757467",
        "sb_hash" : "BoPV4WCA9sAIahjK1HajfFxi+AzC4JGTuf39W3ZWjczDCURx
                     dc9YeteHtcxGVeggpxHJ75/cQ7HN1dDdliyIwg=="
      },
      "signer_cert_ref" : {
        "ref" : [ "1+aaJetg7relERlUDYEiU4ZIZhT4RUviIQZuK7o1GFKaTPQ6y+
                   kx/PNtDrpuqQ6XfrkH9wYDK4ey0y4WrNErnw==",
                  "h4PDxb5ZKmx1eTSqvVvYG8g33s05JzwB+NgEHFU4gc9tqG0kgH
                   kf6W3oLzkTwwurIh6Y9AafZYqc2zP2pE2p4Q==",
                  "Dd2C5sB0IOQeMVnEBkM5Q9W96mBHNwwa2tzXMs+LwuYcOUvPkr
                   yGR0aPG8O9nIP3lbw6KjQ1hDmRk6zC8x2jdg==" ],
        "type" : "chain_hash"
      },
      "sig_data_ref" : [ {
        "ref" : "",
        "hash" : "FcGpOOf8ilcPt21GDd2cGnLGDxRS5j7svM4app2H41dDELm2Czc
                  eTY02ndeJfWjintmQ376IlXTOAr31yzYzsg=="
      }, {
        "ref" : "#xades-11a155d92bf55774613bb7b661477cfd",
        "hash" : "KRkgbZ6P/nhU63IMk0GiUfU/DTwveYiteQkwGeJqC5BzTNV8bQb
                  pedTTuWJPxqvJ0RY84hwm7eY/g0HrAOegKw=="
      } ],
      "time_val" : [ ]
    } ],
    "ext" : null,
    "ver" : "1.0",
    "profile" : "XML",
    "hash_algo" : "http://www.w3.org/2001/04/xmlenc#sha512"
  }
}
]]></artwork></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAHQuMmEAA+19eW/jSJLv//wUhBuY1422XNTloxoLrGzd1mHrtNQ9r0GR
lESJIlUkdRZqPvuLiMzkIVEuV2/PLh6w1TVTEo/MyMg4fhEZmUqlUpJv+pbx
We6aM1v1N64hD1TL1FXfdGy55ywNW9IdzVZX8IzuqlM/5am2b3ieY6e8rZ9S
MhI8DDczSiadUh5SSlbS4MLMcQ+fZdOeOpLm2J5hexvvs+y7G0OSzLVLHz0/
oygP0ILqGiqQYGgb1/QP0tI47BxX/yzXoCfXNvxUEXuWJM9Xbf1P1XJs6NB2
pLX5Wf7dd7Rr2XNc3zWmHnw6rPDDPyVJ3fhzx/0sySlJhj+mDQR0b+SuoJ+u
spF1fWOq2ie3HHcGJBQ9Q5O7jrVBjnhy4ZHuqZOJa2zPbtM9Dygx/M9y2XG9
pW3aM29ysOWabvB2NRjjZ7mxsXX21dGBgqtMJivfKVf80sb2kX/dEn03Vqpp
fYaGvf9UVTUFXd5ozkqKjaxzI1edjWcZh8i4OhvPi12mMQ3MmWkF7L6WG42n
2KDi92NjyqdvZZgM2/C2pmUZcsdR9cigqjBdumNfy4NCZGwZJX2nxAfW70YH
NmcU/ucWOw5GZzvuCuRwa8AUyp3yUyadfuAf79N3Of4xn7lXxMfbfIZ/vH3I
pvnHu3w6H368Dz9SY6Vet5ZNP6SVTIpekGWuEFd4R07JJcvQfNexTS3UEU8G
OQTpnLoqMGajsWs/l7q1X36TX1xHM3S6MnVc+Qlkm5QJX4noljOVC3qpKxdh
zL5qRRqHJlTXl9OfL73LhCQQbzmYWCSZvguVTN+mlDybQMM1DQ/1UbxBA7zC
gbZk4IBMLJC36Rv4D3t4azaK3VolfcIWuBwxFt2D7at7oo/G7UEXM3lguB6S
zVs6pTXF/+WSW7yRS8BHS10awQ0mvkXHVi399O7J6/UbuWOoM+v05brjGet5
/N55z6C6zmmv6tbUozdO3iqDppmup81P3iu7hg5c1pbx2ydvN2/k1gGkBiQ8
/npTndkb7+Tmycs9GKsDTLYM9+Tt3txZqd7p3ZPXn2/kkbk5efPZsLamHdwI
RCebUnKpdPqS9AyzTyg8MOtrYLQOfAalXRl2KKK1bvulWM7ExafoaBt4ypdX
qq3ODPqYSskvYL/VCRgUXdyfkvbTPdSGzGcZGpMzN8pF6Yf+4iO4Syl3l8iH
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
kIn5oNM8IOVMr6WoQApoFVRpUXIM9b0wo4MqwpRAoO4q3knhHYoXkddmuNIV
pID4+VO05ieO8w1bo7PLKbFp4MZBRMeuPHHJIUR+joCtVoUtYd7RFrCTHaDs
0R5TcTC9ev7rD7GECh3TQ1N6/jMPPE2m6lvTE7lSUAla9BWRPZ0GGm71CxMZ
gsjIedXQFmBTVtNuOZ4hBJmOf5rS+UvA6zYelcy0W/wiA4c3nhmeipjEOuAp
EX7NbQEjNHpYdBgloBMORY9EM3Kie/wAUUwi4I9J+HMxUseOZqDYGdKMixgP
sAMbjYggkD7gHmE9JkRsSkQuOZJX5dxi889/lWWiakv0T4U1npdl7j9DWEjH
bHinCyn8+A0Z6NkQeKGFQIi58JeYcM6jluQ82SvxVX12HDfXhOjvxARJ6AYm
OSYwRcsAboMNo5UEQYNKP6zBofOU4nRVRzRjAUalBiTegMpP6lL5vj9okEk1
wSNuM7tJONkXB2xAtPivf/1LMg51Vx2+mm2z/jIe5uvPx9djq7R2RvZ41ank
lbE11hrH+aGXnVdbytjVbevLqO8Pu6vyUOtbFenVmm/V8th5HfbT46WXGw3z
W31R7rUWs5y20BujVdl7zowzWqVcaw6dnDqs261evfNqL/f9culBeunWvJrd
yWtPtdvacv02eILv8NL4AN+teq/VKx1qtnIDlM51RqmjVzu7trXbvj09WJJR
KftaZW81Vq3tZLDbjt4GS3U42Iwy/X3N3JnqW+tYWzimWu0oWrV5Cy9pjWwr
Ox52rAm8I01WeWuUfd1omQHcGM8nFWs5eutsNRMpseY6UNbsjXbN42u6XXw9
NLvQqN1ZY6Otyuteah6XmfGivBovtEO7MlKaldd0c/G6a2ZqmeawmW4dX5V2
cWQ2nupHdahPdRjeW6bljYaWr8EwcRbghma2Lf+uthrksMeJPfAmTztTy1j2
G1IF14ZZz5y8tWzsuad42KBlVF9Nqb3KpyeVHTCybmnEuMfHfrpV7iAz7cct
vlxbzRW9WmDjz1jLhn2RB62MXt5tsWcktfEGDVSshQHM1atNYLa/NuB+s1gy
pwMFOmitpXH64TAejsw2WEYiOTOfa5kZTld+lBm8Dpb7urHqLLSSl28p1riX
mVe6w9F+Yi+z7f7cl7r9lgkidNsdDtTeqr42VvdZbanXdWXe7i0eb4clq2f0
/aq6bGUmq4dNL1PudDLjJgzntZkdlyS9VMu1q1ajn9atYUV7IMFaWUua++Gr
3zo28+2itWjBPDWLo2Nr0cyMhrX0uKel4RNMY2WUbfU0pbXQaKpG1oMzems5
2MDr6uF1sOi8vSqlvKaU66Ph/Ev3WK6NhutVx56vn5XyrfR67Dx30p00tJ8f
HFvqILNeGMtOcTCo58aVZn44HCjj/lwZgTINVgN7nH3MdUtOtoVSmy5lpW4p
tx+XOkvgdr77ptsvPcWcdpkMTFaDAwiNpdmdqbYarGqL9R1O99gEuTjU9s+Z
8lzqrqCHow4zsS/3V/tBp2yV1UFfGS4tVS2/Kn1rkFH7VmdoDxqtzP2+o4wb
o0Hntd8b558zfk5CbvbsTkmzH9PaoJQZVsYHVZnl9bRV6h47ltF7zLfK+qG3
HBwmtmDyTOmXOrnRYqBK3Uw61xwO+v1sOQMjHHeOc7t5BN4XB89gi5+elbzd
6c8rg17HHh0tRetrOzWj19QMSMkRJLFXXbuDqp7V3+p1tTget/vl+dhaj7Vh
82BYhYNW6h+0YqeDvIFZKo2L9WLrrfXULFkv/eGgJQ1W+fLrym+1BiWYhWVm
0q/XeraeHfXqimHNW9rBb+rZwXikPAx069HVbKvaXzzO+yUt1ztaG6k7KBwn
lXq2tfS/9Htlp1NJd9Xj+Pb1OM81V+vl+Kg81CyFWa1KH0V8oVbK6wmXFwnM
FSkF6AQakvlblk8TqC+bOscky1QpH1Uye+NFJ/v40suMwD7uF1K/Clamr+PY
Fp1MvtlROrm+1UyrC/2oLxVl9Pa4ay5nSnPYKXX6e7+5bN0C+/rDXuEwWXUs
kIPxm7qyNnol3WketUx3uB8NSg+P2qK5N97WY8NuceHaB0JUM1tgvTtgPxTQ
hWFp3+oNlu1e3RwvwJQcUS9Kx9Gqlh0tRplm7xWsBKgSWetA1Rv9lW+PLCcj
9cFATFbzQWvRqveG3q6TsQZjC4yL0unr2bE1HFrKeFB2dUW3una52OrXb2HC
hu1KvTOyHy1pXIYHB/pzvzrf60tn17eWuVZlnp30QL1BYcbHx5q2LIPX0hs6
zoid1kEeFHWYttBeSmQw0+mHN1Cg8dtcAYXZ6MO9Bw9lxm81ILe2bywKKEQ7
bfWwAs5bODPDUrqJsyPR9JQfwB/o28CBFNdaIw12MKtnG7Z2bKzA7MH35qKw
aw7QJnbAfs79SWWwkUaH1lGtQHO9mjl9U256evXJqfW740Xm2Ky1nmd3pVwu
dT8o/bmqf7ntVdJt52Vnj7ren/NDf7J5k1Zuo77eLO8rnfzItXWjvdFe+qPC
7mVf9f+c3t7Xa6+Hcs9U1Fn7YVBf2OnO3csiW/dvh5WH9Qh0wc43qqlieqXu
i+n0eL+faCOjOvE8X890D5lNU80+6mv4WtFfDqvuSrut7Ef5Td1pKKn8duf8
KWWtVO5xkm089czNfvSirY7+c21SPGTmpVk9W92nn3PVstKtzuxszV5/eTS2
2fkq023swMTlH5+aknvYPRbm1VHptl0pKWq7frv0C/n+i7Ko1apTdfdgpnc1
s+5Xe2pls/UPw25jmde8+WpjP1SX+lJadnqFu/zkuPmi1A668mWu3Clu4b6y
MFJerrfL7Y++P3sGQrrL7eHezpe/bI9D3RtvNeupklmNpNGD29zP/7y7Ve5a
b9peXRRecodi23lueXl79ZC96zcMZfvUulfvhj23vAG1XLiHu+r82GnmnvIF
6ct+Umw/vr00Dk7TzX2xc41O/am6bxuN8a2T3cy2xXZ76B0Wy6xhmYfHXXFz
/6VeveuvDqbW2Bc16clV5v3nP5fbTunLopgZE/KSihz+4co0W8DmmOyrJMtX
S1O/+nzVNuzar7lsrj6fbKdF258O/vh077b3lbsyjHahPg/q6uBLrfz45swH
84KRnz7fq7azDX5rV053b+/v3bvniWr9Ot2u1Wp6cW9OZvnM6+Mh/fL6H/9x
dY3d+Yc1dIeL0fQVYDd87XTz6cyV9O2cXpZ3i9KrbvQr+bN8Nff99edPnzim
xV/U/iTOhkqztgEyB0968KgHCBaLamwbjwzwjE8crjouf1718fn0rZLN5e9z
mTRdXfgmtZLT09mH22l6Or3L3E9zip7P5JTs5Dat5e9yuftb1sZpevGz/JVY
hDfw2+/8O1wx9tQdHml3La7x1+NPwvWVR29ftZ+vrsOrCS3AVfyVVXxWbG0I
76wdK8o6U785Y4m39T+xfF+KpTE+hTMs/vhear00958U/uPXsvxN/mdsCK4x
DYceXMUMAfV/0IyXQaN21LX188NdbdSel2vTtH24e6iuak+T7uBYM8atiXl0
7txKbXdOAf2ptlrK8a3WPTxXFk9b27Hb6mtl2vj0kt0W/cf7+8Nzd2i8zbjg
cTpMJjymnrrLPtw/aLdTTbnNwn/qJG/c5bPTtDK9gwm9vYu+xXf90auPzssg
N3wqPHiFmjpfPKer6mJa3pu/Fo5PuXqlt5lmH4aAdxfasfjU7+yTqde1h5Hh
G1Vf21cGxmy23lfrd/lP2utdtZXWizrod22HtAsOR/kbXbw44TO/8rt8lf5V
VeuGP7tzDavUsfrFUcns58a18byX6/S3Zu11vHm+c9KV8rPae3m9PfyaROly
/+ml5Rfd9ebL6+3b1F1WH3aj4nPOOCiH3NBtlVx7F+Nw+Odqnnsp7if58fNq
nzZ63S/bwXZUuZ9ls56Srx93j7+2ZqVquZ+baQ/+l4qynFUTKZgCnHEax2Vv
t9u4tfnt6KGgTsejL1rm+JJZlzLr3OslCop65invPSq19qvRHNilx2Uz//ow
fLhdPVZbO4CD/vGt6f3a2G1GWru/fVm6SRQcKh1Ffanctx/s2kvWmuxunxev
6Xlx1VneHp/u95mFjjMV6gAzcwaJS1gDmDiVwTLYmcrza1dROQyEsKxV1u32
9N60tBc/k67AQLWK3agU92BKF3fetplT1+tMNQeyVGqsMk9HLWFkRm+kZMDb
16fDhWn7q9fsHQR0b712wc2mD8fR0YtJYBJ1P+HZkl4qnVbT+bz+kJlM8/k7
UJ90djK5m9zepnN3d9pUTxzEc2c5m4xvXz7Z8/5tttZcKhWzP+1/KvZ2W2Nk
+sbrclcx6l+e8o/HXmtwP3mdJAxibei93mZYf9l/2daVzug+N9+t7ozRp5lS
dQttY/a8iwwiYqjEvhzG+X9KsfvntvVqi6c6fmaHLfFLvD6ALr81G+JyUB4U
tba73e5ml71x3NmnjKKkPym5T/uVBcb3J2+ukvuD7rkL/H9G3ya+uIQAAA==

-->

</rfc>

