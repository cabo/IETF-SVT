<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.14 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC6931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6931.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7518 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-santesson-svt-01" category="std" consensus="true">

  <front>
    <title>Signature Validation Token</title>

    <author initials="S." surname="Santesson" fullname="Stefan Santesson">
      <organization abbrev="IDsec Solutions">IDsec Solutions AB</organization>
      <address>
        <postal>
          <street>Forskningsbyn Ideon</street>
          <city>Lund</city>
          <code>223 70</code>
          <country>SE</country>
        </postal>
        <email>sts@aaa-sec.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>516 Dranesville Road</street>
          <city>Herndon, VA</city>
          <code>20170</code>
          <country>US</country>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="21"/>

    <area>Security</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Electronic signatures have a limited lifespan with respect to the time period that they
can be validated and determined to be authentic. The Signature Validation Token (SVT)
defined in this specification provides evidence that asserts the validity of an
electronic signature. The SVT is provided by a trusted authority, which asserts that
a particular signature was successfully validated according to defined procedures at
a certain time. Any future validation of that electronic signature can be satisfied by
validating the SVT without any need to also validate the original electronic signature or
the associated digital certificates. SVT supports electronic signatures in CMS, XML, and
PDF documents.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>Electronic signatures have a limited lifespan regarding when they can be validated
and determined to be authentic. Many factors make it more difficult to validate
electronic signatures over time. For example:</t>

<t><list style="symbols">
  <t>Trusted information about the validity of the certificate containing the signer’s public key is not available.</t>
  <t>Trusted information about the date and time when the signature was actually created is not available.</t>
  <t>Algorithms used to create the electronic signature are no longer considered secure.</t>
  <t>Services necessary to validate the signature are no longer available.</t>
  <t>Supporting evidence such as CA certificates, OCSP responses, CRLs, or timestamps.</t>
</list></t>

<t>The challenges to validation of an electronic signature increases over time, and
eventually it is simply impossible to verify the signature with a sufficient level of
assurance.</t>

<t>Existing standards, such as the ETSI XAdES <xref target="XADES"/> profile for XML
signatures <xref target="XMLDSIG11"/>, ETSI PAdES <xref target="PADES"/> profile for PDF signatures
<xref target="ISOPDF2"/>, and ETSI CAdES <xref target="CADES"/> profile for CMS signatures
<xref target="RFC5652"/> can be used to prolong the lifetime of a signature by
storing data that supports validation of the electronic signature beyond
the lifetime of the certificate containing the signer’s public key, which
is often referred to as the signing certificate.  The problem with this
approach is that the amount of information that must be stored along with
the electronic signature constantly grows over time.  The increasing
amount of information and signed objects that need to be validated in
order to verify the original electronic signature grows in complexity to
the point where validation of the electronic signature may become
infeasible.</t>

<t>The Signature Validation Token (SVT) defined in this specification takes a fundamentally
different approach to the problem by providing evidence by a trusted authority that
asserts the validity of an electronic signature. The SVT asserts that a particular
electronic signature was successfully validated  by a trusted authority according to
defined procedures at a certain date and time. Once the SVT is issued by a trusted
authority, any future validation of that electronic signature is satisfied by validating
the SVT, without any need to also validate the original electronic signature.</t>

<t>This approach drastically reduces the complexity of validation of older electronic
signatures for the simple reason that validating the SVT eliminates the need to
validate the many signed objects that would otherwise been needed to provide the
same level of assurance. The SVT can be signed with private keys and algorithms that
provide confidence for a considerable time period. In fact, multiple SVTs can be used
to offer greater assurance. For example, one SVT could be produced with a large RSA
private key, a second one with a strong elliptic curve, and a third one with a quantum
safe digital signature algorithm to protect against advances in computing power and
cryptanalytic capabilities. Further, the trusted authority can add additional SVTs
in the future using fresh private keys and signatures to extend the lifetime of the,
if necessary.</t>

</section>
<section anchor="defs" title="Definitions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document use the following terms:</t>

<t><list style="symbols">
  <t>Signed Data – The data covered by a particular electronic signature. This is typically
equivalent to the signed content of a document, and it represents the data that the
signer intended to sign. In some cases, such as in some XML signatures, the signed data
can be the collection of several data fragments each referenced by the signature. In the
case of PDF, this is the data covered by the “ByteRange” parameter in the signature
dictionary.</t>
  <t>Signed Bytes – These are the actual bytes of data that were hashed and signed by the
digital signature algorithm. In most cases, this is not the actual Signed Data, but a
collection of signature metadata that includes references (hash) of the Signed Data as
well as information about algorithms and other data bound to a signature. In XML, this
is the canonicalized SignedInfo element. In CMS and PDF signatures, this is the
DER-encoded SignedAttributes structure.</t>
</list></t>

<t>When these terms are used as defined in this section, they appear with a
capitalized first letter.</t>

</section>
<section anchor="svt" title="Signature Validation Token">

<t>The Signature Validation Token (SVT) is created by a trusted service to capture
evidence of successful electronic signature verification, and then relying
parties can depend on the checking that has already taken place by the
trusted service.</t>

<section anchor="svt-function" title="Signature Validation Token Function">

<t>The function of the SVT is to capture evidence of electronic signature
validity at one instance of secure signature validation process and to
use that evidence to eliminate the need to perform any repeated
cryptographic validation of the original electronic signature value, as
well as reliance on any hash values bound to that signature.  The SVT
achieves this by binding the following information to a specific
electronic signature:</t>

<t><list style="symbols">
  <t>A unique identification of the electronic signature.</t>
  <t>The data and metadata signed by the electronic signature.</t>
  <t>The signer’s certificate that was validated as part of electronic signature verification.</t>
  <t>The certification path that was used to validate the signer’s certificate.</t>
  <t>An assertion providing evidence of that the signature was verified, the date and time the verification was performed, the procedures used to verify the electronic signature, and the outcome of the verification.</t>
  <t>An assertion providing evidence of the date and time at which the signature is known to have existed, the procedures used to validate the date and time of existence, and the outcome of the validation.</t>
</list></t>

<t>Using an SVT is equivalent to validating a signed document in a system once, and then
using that document multiple times without subsequent revalidating the electronic
signature for each usage. Such procedures are common in systems where the document is
residing in a safe and trusted environment where it is protected against modification. The
SVT allows the safe and trusted environment to expand beyond a locally controlled
environment, and the SVT allows a greater period between original electronic signature
verification and subsequent usage.</t>

<t>Using the SVT, the electronic signature verification of a document can be take place
once using a reliable trusted service, and then any relying party that is able to
depend on the verification process already performed by the trusted service. The SVT
is therefore not only a valuable tool to extend the lifetime of a signed document, but
also avoids the need for careful integration between electronic signature verification
and document usage.</t>

</section>
<section anchor="svt-syntax" title="Signature Validation Token Syntax">

<t>The SVT is carried in a JSON Web Token (JWT) as defined in <xref target="RFC7519"/>.</t>

<section anchor="svt-syntax-dt" title="Data Types">

<t>The contents of claims in an SVT are specified using the following data types:</t>

<t><list style="symbols">
  <t>String – JSON Data Type of string that contains an arbitrary case sensitive string value.</t>
  <t>Base64Binary – JSON Data Type of string that contains of Base64 encoded byte array of binary data.</t>
  <t>StringOrURI – JSON Data Type of string that contains an arbitrary string or an URI as defined in <xref target="RFC7519"/>, which REQUIRES a value containing the colon character (“:”) to be a URI.</t>
  <t>URI – JSON Data Type of string that contains an URI as defined in <xref target="RFC7519"/>.</t>
  <t>Integer – JSON Data Type of number that contains a 32-bit signed integer value (from -2^31 to 2^31-1).</t>
  <t>Long – JSON Data Type of number that contains a 64-bit signed integer value (from -2^63 to 2^63-1).</t>
  <t>NumericDate – JSON Data Type of number that contains a data as defined in <xref target="RFC7519"/>, which is the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds.</t>
  <t>Boolean – JSON Data Type of boolean that contains explicit value of true or false.</t>
  <t>Object&lt;Class&gt; – A JSON object holding a claims object of a class defined in this specification (see <xref target="svt-syntax-claim"/>).</t>
  <t>Map&lt;Type&gt; – A JSON object with name-value pairs where the value is an object of the specified Type in the notation. For example, Map&lt;String&gt; is a JSON object with name value pairs where all values are of type String.</t>
  <t>Array – A JSON array of a specific data type as defined in this section. An array is expressed in this specification by square brackets. For example, [String] indicates an array of String values, and [Object&lt;DocHash&gt;] indicates an array of DocHash objects.</t>
  <t>Null – A JSON null that represents an absent value. A claim with a null value is equivalent with an absent claim.</t>
</list></t>

</section>
<section anchor="svt-syntax-claim" title="Signature Validation Token JWT Claims">

<t>The SVT MUST contain only JWT claims in the following list:</t>

<t><list style="symbols">
  <t>jti – A String data type that is a “JWT ID” registered claim according to <xref target="RFC7519"/>. It is RECOMMENDED that the identifier holds a hexadecimal string representation of a 128-bit unsigned integer. A SVT MUST contain one “JWT ID” claim.</t>
  <t>iss  – A StringOrURI data type that is an “Issuer” registered claim according to <xref target="RFC7519"/>, which is an arbitrary unique identifier of the SVT issuer. This value SHOULD have the value of an URI based on a domain owned by the issuer. A SVT MUST contain one “Issuer” claim.</t>
  <t>iat – A NumericDate data type that is an “Issued At” registered claim according to <xref target="RFC7519"/>, which expresses the date and time when this SVT was issued. A SVT MUST contain one “Issued At” claim.</t>
  <t>aud – A [StringOrURI] data type or a StringOrURI data type that is an “Audience” registered claim according to <xref target="RFC7519"/>. The audience claim is an array of one or more identifiers, identifying intended recipients of the SVT. Each identifier MAY identify a single entity, a group of entities or a common policy adopted by a group of entities. If only one value is provided it MAY be provided as a single StringOrURI data type value instead of as an array of values. Inclusion of the “Audience” claim in a SVT is OPTIONAL.</t>
  <t>exp – A NumericDate data type that is an “Expiration Time” registered claim according to <xref target="RFC7519"/>, which expresses the date and time when services and responsibilities related to this SVT is no longer provided by the SVT issuer. The precise meaning of the expiration time claim is defined by local policies. See implementation note below. Inclusion of the “Expiration Time” claim in a SVT is OPTIONAL.</t>
  <t>sig_val_claims – A Object&lt;SigValidation&gt; data type that contains signature validation claims for this SVT extending the standard registered JTW claims above. A SVT MUST contain one sig_val_claims claim.</t>
</list></t>

<t>Note: An SVT asserts that a particular validation process was undertaken at a stated
date and time. This fact never changes and never expires. However, some other aspects
of the SVT such as liability for false claims or service provision related to a specific
SVT may expire after a certain period of time, such as a service where an old SVT can be
upgraded to a new SVT signed with fresh keys and algorithms.</t>

</section>
<section anchor="sigvalidation-obj-class" title="SigValidation Object Class">

<t>The sig_val_claims JWT claim uses the SigValidation object class. A SigValidation object
holds all custom claims, and a SigValidation object contains the following parameters:</t>

<t><list style="symbols">
  <t>ver – A String data type representing the version. This parameter MUST be present, and the version in this specification indicated by the value “1.0”.</t>
  <t>profile – A StringOrURI data type representing the name of a profile that defines conventions followed for specific claims and any extension points used by the SVT issuer. Inclusion of this parameter is OPTIONAL.</t>
  <t>hash_algo – A URI data type that identifies the hash algorithm used to compute the hash values within the SVT. The URI identifier MUST be one defined in <xref target="RFC6931"/> or in the IANA registry defined by this specification. This parameter MUST be present.</t>
  <t>sig – A [Object&lt;Signature&gt;] data type that gives information about validated electronic signatures as an array of Signature objects. If the SVT contains signature validation evidence for more than one signature, then each signature is represented by a separate Signature object. At least one Signature object MUST be present.</t>
  <t>ext – A Map&lt;String&gt; data type that provides additional claims related to the SVT. Extension claims are added at the discretion of the SVT issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="signature-obj-class" title="Signature Claims Object Class">

<t>The sig parameter in the SigValidation object class uses the Signature object
class. The Signature object contains claims related to signature validation
evidence for one signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>sig_ref – A Object&lt;SigReference&gt; data type that contains reference information identifying the target signature. This parameter MUST be present.</t>
  <t>sig_data – A [Object&lt;SignedData&gt;] data type that contains an array of references to Signed Data that was signed by the target electronic signature.  This parameter MUST be present.</t>
  <t>signer_cert_ref – A Object&lt;CertReference&gt; data type that references the signer’s certificate and optionally reference to a supporting certification path that was used to verify the target electronic signature. This parameter MUST be present.</t>
  <t>sig_val – A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of signature verification according to defined procedures. This parameter MUST be present.</t>
  <t>time_val – A [Object&lt;TimeValidation&gt;] data type that contains an array of time verification results that the target signature has existed at a specific date and time in the past. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="sigreference-obj-class" title="SigReference Claims Object Class">

<t>The sig_ref parameter in the Signature object class uses the SigReference object
class. The SigReference object provides information used to match the Signature
claims object to a specific target electronic signature and to verify the integrity
of the target signature value and Signed Bytes, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>id – A String data type that contains an identifier assigned to the target signature. Inclusion of this parameter is OPTIONAL.</t>
  <t>sig_hash – A Base64Binary data type that contains a hash value of the target electronic signature value. This parameter MUST be present.</t>
  <t>sb_hash – A Base64Binary data type that contains a hash value of the Signed Bytes of the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="signeddata-obj-class" title="SignedData Claims Object Class">

<t>The sig_data parameter in the Signature object class uses the SignedData object
class. The SignedData object provides information used to verify the target electronic
signature references to Signed Data as well as to verify the integrity of all data that
is signed by the target signature, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>ref – A String data type that contains a reference identifier for the data or data fragment covered by the target electronic signature. This parameter MUST be present.</t>
  <t>hash – A Base64Binary data type that contains the hash value for the data covered by the target electronic signature. This parameter MUST be present.</t>
</list></t>

</section>
<section anchor="policyval-obj-class" title="PolicyValidation Claims Object Class">

<t>The sig_val parameter in the Signature object class uses the PolicyValidation object
class. The PolicyValidation object provides information about the result of a validation
process according to a spefific policy, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>pol – A StringOrURI data type that contains the identifier of the policy governing the electronic signature verification process. This parameter MUST be present.</t>
  <t>res – A String data type that contains the result of the electronic signature verification process. The value MUST be one of “PASSED”, “FAILED” or “INDETERMINATE” as defined by <xref target="ETSI319102-1"/>. This parameter MUST be present.</t>
  <t>msg – A String data type that contains a message describing the result. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="timever-obj-class" title="TimeValidation Claims Object Class">

<t>The time_val parameter in the Signature object class uses the TimeValidation object
class. The TimeValidation claims object provides information about the result of
validating time evidence asserting that the target signature existed at a particular
date and time in the past, and it contains the following parameters:</t>

<t><list style="symbols">
  <t>time – A NumericDate data type that contains the verified time. This parameter MUST be present.</t>
  <t>type – A StringOrURI data type that contains an identifier of the type of evidence of time. This parameter MUST be present.</t>
  <t>iss – A StringOrURI data type that contains an identifier of the entity that issued the evidence of time. This parameter MUST be present.</t>
  <t>id – A String data type that contains an unique identifier assigned to the evidence of time.  Inclusion of this parameter is OPTIONAL.</t>
  <t>val – A [Object&lt;PolicyValidation&gt;] data type that contains an array of results of the time evidence validation according to defined validation procedures. Inclusion of this parameter is OPTIONAL.</t>
  <t>ext – A MAP&lt;String&gt; data type that provides additional claims related to the target signature. Extension claims are added at the discretion of the SVT Issuer; however, extension claims MUST follow any conventions defined in a profile of this specification (see <xref target="profiles"/>). Inclusion of this parameter is OPTIONAL.</t>
</list></t>

</section>
<section anchor="certref-obj-class" title="CertReference Claims Object Class">

<t>The signer_cert_ref parameter in the Signature object class uses the CertReference object
class. The CertReference object references a single X.509 certificate or a X.509
certification path, either by providing the certificate data or by providing hash
references for certificates that can be located in the target electronic signature, and
it contains the following parameters:</t>

<t><list style="symbols">
  <t>type – A StringOrURI data type that contains an identifier of the type of reference. The type identifier MUST be one of the identifiers defined below, an identifier specified by the selected profile, or a URI identifier. This parameter MUST be present.</t>
  <t>ref – A [String] data type that contains an array of string parameters according to conventions defined by the type identifier. This parameter MUST be present.</t>
</list></t>

<t>The following type identifiers are defined:</t>

<t><list style="symbols">
  <t>“chain” – The ref contains an array of Base64 encoded X.509 certificates <xref target="RFC5280"/>. The certificates MUST be provided in the order starting with the end entity certificate. Any following certificate must be able to validate the signature on the previous certificate in the array.</t>
  <t>chain_hash – The ref contains an array of one or more Base64 encoded hash values where each hash value is a hash over a X.509 certificate <xref target="RFC5280"/> used to validate the signature.  The certificates MUST be provided in the order starting with the end entity certificate.  Any following certificate must be able to validate the signature on the previous certificate in the array. This option MUST NOT be used unless all hashed certificates are present in the target electronic signature.</t>
</list></t>

<t>Note: All certificates referenced using the identifiers above are X.509 certificates.
Profiles of this specification MAY define alternative types of public key containers;
however, a major function of these referenced certificates is not just to reference
the public key, but also to provide the subject name of the signer. It is therefore
important for the full function of an SVT that the referenced public key container also
provides the means to identify of the signer.</t>

</section>
<section anchor="svt-jose-header" title="SVT JOSE Header">

<t>The SVT JWT MUST contain the following JOSE header parameters in accordance with
Section 5 of <xref target="RFC7519"/>:</t>

<t><list style="symbols">
  <t>typ – This parameter MUST have the string value “JWT” (upper case).</t>
  <t>alg – This parameter identifies the algorithm used to sign the SVT JWT. The algorithm identifier MUST be specified in <xref target="RFC7518"/> or the IANA JSON Web Signature and Encryption Algorithms Registry [ add a ref ]. The specified signature hash algorithm MUST be identical to the hash algorithm specified in the hash_algo parameter of the SigValidation object within the sig_val_claims claim.</t>
</list></t>

<t>The SVT header MUST contain a public key or a reference to a public key used to verify the signature on the SVT in accordance with <xref target="RFC7515"/>. Each profile, as discussed in <xref target="profiles"/>, MUST define the requirements for how the key or key reference is included in the header.</t>

</section>
</section>
</section>
<section anchor="profiles" title="Profiles">

<t>Each signed document and signature type will have to define the precise content and
use of several claims in the SVT.</t>

<t>Each profile MUST as a minimum define:</t>

<t><list style="symbols">
  <t>How to reference the Signed Data content of the signed document.</t>
  <t>How to reference to the target electronic signature and the Signed Bytes of the signature.</t>
  <t>How to reference certificates supporting each electronic siganture.</t>
  <t>How to include public keys or references to public keys in the SVT.</t>
  <t>Whether each electronic signature is supported by a single SVT, or whether one SVT may support multiple electronic signatures of the same document.</t>
</list></t>

<t>A profile MAY also define:</t>

<t><list style="symbols">
  <t>Explicit information on how to perform signature validation based on an SVT.</t>
  <t>How to attach an SVT to an electronic signature or signed document.</t>
</list></t>

</section>
<section anchor="signature-verification-with-a-svt" title="Signature Verification with a SVT">

<t>Signature verification based on an a SVT MUST follow these steps:</t>

<t><list style="numbers">
  <t>Locate all available SVTs available for the signed document that are relevant for the target electronic signature.</t>
  <t>Select the most recent SVT that can be successfully validated and meets the requirement of the relying party.</t>
  <t>Verify the integrity of the signature and the Signed Bytes of the target electronic signature using the sig_ref claim.</t>
  <t>Verify that the Signed Data reference in the original electronic signature matches the reference values in the sig_data_ref claim.</t>
  <t>Verify the integrity of referenced Signed Data using provided hash values in the sig_data_ref claim.</t>
  <t>Obtain the verified certificates supporting the asserted electronic signature verification through the signer_cert_ref claim.</t>
  <t>Verify that signature validation policy results satisfy the requirements of the relying party.</t>
  <t>Verify that verified time results satisfy the context for the use of the signed document.</t>
</list></t>

<t>After successfully performing these steps, signature validity is established as well as
the trusted signer certificate binding the identity of the signer to the electronic
signature.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>{ To be written }</t>

</section>
<section anchor="seccons" title="Security Considerations">

<t>{ To be written }</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC8174;
&RFC5280;
&RFC5652;
&RFC6931;
&RFC7515;
&RFC7518;
&RFC7519;
<reference anchor="ETSI319102-1" >
  <front>
    <title>ETSI - Electronic Signatures and Infrastructures (ESI); Procedures for Creation and Validation of AdES Digital Signatures; Part 1: Creation and Validation</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="May"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 102-1 v1.1.1"/>
</reference>
<reference anchor="XMLDSIG11" >
  <front>
    <title>XML Signature Syntax and Processing Version 1.1</title>
    <author initials="D." surname="Eastlake" fullname="Donald Eastlake">
      <organization></organization>
    </author>
    <author initials="J." surname="Reagle" fullname="Joseph Reagle">
      <organization></organization>
    </author>
    <author initials="D." surname="Solo" fullname="David Solo">
      <organization></organization>
    </author>
    <author initials="F." surname="Hirsch" fullname="Frederick Hirsch">
      <organization></organization>
    </author>
    <author initials="M." surname="Nystrom" fullname="Magnus Nystrom">
      <organization></organization>
    </author>
    <author initials="T." surname="Roessler" fullname="Thomas Roessler">
      <organization></organization>
    </author>
    <author initials="K." surname="Yiu" fullname="Kelvin Yiu">
      <organization></organization>
    </author>
    <date year="2013" month="April" day="11"/>
  </front>
  <seriesInfo name="W3C" value="Proposed Recommendation"/>
</reference>
<reference anchor="ISOPDF2" >
  <front>
    <title>Document management -- Portable document format -- Part 2: PDF 2.0</title>
    <author >
      <organization>ISO</organization>
    </author>
    <date year="2017" month="July"/>
  </front>
  <seriesInfo name="ISO" value="32000-2"/>
</reference>
<reference anchor="XADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); XAdES digital signatures; Part 1: Building blocks and XAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 132-1 v1.1.1"/>
</reference>
<reference anchor="PADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); PAdES digital signatures; Part 1: Building blocks and PAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 142-1 v1.1.1"/>
</reference>
<reference anchor="CADES" >
  <front>
    <title>Electronic Signatures and Infrastructures (ESI); CAdES digital signatures; Part 1: Building blocks and CAdES baseline signatures</title>
    <author >
      <organization>ETSI</organization>
    </author>
    <date year="2016" month="April"/>
  </front>
  <seriesInfo name="ETSI" value="EN 319 122-1 v1.1.1"/>
</reference>


    </references>



<section anchor="appendix-examples" title="Appendix: Examples">

<t>The following example illustrates a basic SVT according to this specification
issued for a signed PDF document.</t>

<t>Note: Line breaks in the decoded example are inserted for readablilty. Line
breaks are not allowed in valid JSON data.</t>

<t>Signature validation token JWT:</t>

<figure><artwork><![CDATA[
    eyJraWQiOiJPZW5JKzQzNEpoYnZmRG50ZlZcLzhyT3hHN0ZrdnlqYUtWSmFWcUlG
    QlhvaFZoQWU1Zks4YW5vdjFTNjg4cjdLYmFsK2Z2cGFIMWo4aWJnNTJRQnkxUFE9
    PSIsInR5cCI6IkpXVCIsImFsZyI6IlJTNTEyIn0.eyJhdWQiOiJodHRwOlwvXC9l
    eGFtcGxlLmNvbVwvYXVkaWVuY2UxIiwiaXNzIjoiaHR0cHM6XC9cL3N3ZWRlbmNv
    bm5lY3Quc2VcL3ZhbGlkYXRvciIsImlhdCI6MTU4MjczMDY0NSwianRpIjoiZTIy
    YzViZTZkZDZjYzZkYjgzNGJjY2QwNjZmNWUyZTMiLCJzaWdfdmFsX2NsYWltcyI6
    eyJzaWciOlt7ImV4dCI6bnVsbCwic2lnX3ZhbCI6W3sibXNnIjoiSW52YWxpZCBz
    aWduYXR1cmUiLCJleHQiOm51bGwsInJlcyI6IkZBSUxFRCIsInBvbCI6Imh0dHA6
    XC9cL2lkLnN3ZWRlbmNvbm5lY3Quc2VcL3N2dFwvc2lndmFsLXBvbGljeVwvY2hh
    aW5cLzAxIn1dLCJzaWdfcmVmIjp7InNpZ19oYXNoIjoiQmh1RTlCQ1lkcUxneW93
    bDJQYm1uSzlkSkFtaVZ0VDF1OVZnaUY5OWgyaFZQekU0WExXdmJDUGU0YUNKM0l6
    RmZvTDlrM3RXcjBXK3d5OUJlcWlyY1E9PSIsImlkIjpudWxsLCJzYl9oYXNoIjoi
    YnVlcTVIVE8xYnRwQ3JYUlg3VHpFS1VyTkpRaEdHOHFCaDR3eEVTcVJMM0J6bjRj
    bHZLMzdqWXUwS2pNTWtnSlFFTWZBMWIzaW1peTc5dDdoK1loOHc9PSJ9LCJzaWdu
    ZXJfY2VydF9yZWYiOnsicmVmIjpbIk5TdUZNXC92SitiZUJsUXRRVHptY1loNXg3
    TDhXQzlFMUtQSFJBMWlvTk9sS1ZHYmxhOVVSelljc2lzQXgyYmNzcU9oa3ZWVGMz
    bUs5RTZhZzA3aGZhdz09Il0sInR5cGUiOiJjaGFpbl9oYXNoIn0sInNpZ19kYXRh
    X3JlZiI6W3sicmVmIjoiMCAxMjI5MzUgMTI3OTM3IDI3NDMwIiwiaGFzaCI6Imt1
    VWI4NkZzTU5tSmwzdjRiUUswOUZrUWd2bzlReDAxbk5SeVFLVVppaEdFdW1kVnF0
    dUJLTlBxWkkxVHpDUWV3Nm44b0ZNak5oQjhDMFhNSmxrRE9RPT0ifV0sInRpbWVf
    dmFsIjpbXX1dLCJleHQiOnsibmFtZTIiOiJ2YWwyIiwibmFtZTEiOiJ2YWwxIn0s
    InZlciI6IjEuMCIsInByb2ZpbGUiOiJQREYiLCJoYXNoX2FsZ28iOiJodHRwOlwv
    XC93d3cudzMub3JnXC8yMDAxXC8wNFwveG1sZW5jI3NoYTUxMiJ9fQ.DhrCRxT_U
    8LeqK1BU9-5Bqui2cs5n21PrSqPnDtVa7mxUtqTnouOXjVfuWR0lfNAjEkc1y2QS
    X5x2dmMdCpNLWX127UHYiAm8NzeYuoWqdnxKiy61hZ1l0Jldnk52ngG_2UNDnrCG
    Bo9OgC90kG2bFQimZB3WgVtE7ad_HAwIXwd-vEHt6Sf2yWXlUTYqQ1Dxgq6pTKQn
    uf5ahsHVyeDihgNeix8-cGx1MEvvHNUpCcIXBx67BEcZ-SrqRoIZkVqEcW83KFMg
    qKWmWDgp4z_CKM5ix2dVzwp1GvYOM6M3QUKYgmiNA6dMWJvXeJZ-KKi5A-6gEqfg
    OsixuZechcDon_3nMzEeNBSJFXU7ohkvxIJN9LXNFAxzAT2UmASxrL9wvaQMmJHY
    Meet-vUsOPWcsq07eKO5bnsYwrs9igYeotgcT_Nl74Rmf9uMye_IgyzlS_NLL4xq
    9Aaf6LPXWZ0S_plugvfzv7HuzXNOY994voq8sOpO9xKYhqYnzbdDFKU
]]></artwork></figure>

<t>Decoded JWT Header:</t>

<figure><artwork><![CDATA[
    {
      "kid" : "OenI+434JhbvfDntfV\/8rOxG7FkvyjaKVJaVqIFBXohVhAe5fK8an
               ov1S688r7Kbal+fvpaH1j8ibg52QBy1PQ==",
      "typ" : "JWT",
      "alg" : "RS512"
    }
]]></artwork></figure>

<t>Decoded JWT Claims:</t>

<figure><artwork><![CDATA[
    {
      "aud" : "http://example.com/audience1",
      "iss" : "https://swedenconnect.se/validator",
      "iat" : 1582730645,
      "jti" : "e22c5be6dd6cc6db834bccd066f5e2e3",
      "sig_val_claims" : {
        "sig" : [ {
          "ext" : null,
          "sig_val" : [ {
            "msg" : "Invalid signature",
            "ext" : null,
            "res" : "FAILED",
            "pol" : "http://id.swedenconnect.se/svt/sigval-policy/
                     chain/01"
          } ],
          "sig_ref" : {
            "sig_hash" : "BhuE9BCYdqLgyowl2PbmnK9dJAmiVtT1u9VgiF99h2h
                          VPzE4XLWvbCPe4aCJ3IzFfoL9k3tWr0W+wy9BeqircQ
                          ==",
            "id" : null,
            "sb_hash" : "bueq5HTO1btpCrXRX7TzEKUrNJQhGG8qBh4wxESqRL3B
                         Bzn4clvK37jYu0KjMMkgJQEMfA1b3imiy79t7h+Yh8w=
                         ="
          },
          "signer_cert_ref" : {
            "ref" : [ "NSuFM/vJ+beBlQtQTzmcYh5x7L8WC9E1KPHRA1ioNOlKVG
                       bla9URzYcsisAx2bcsqOhkvVTc3mK9E6ag07hfaw==" ],
            "type" : "chain_hash"
          },
          "sig_data_ref" : [ {
            "ref" : "0 122935 127937 27430",
            "hash" : "kuUb86FsMNmJl3v4bQK09FkQgvo9Qx01nNRyQKUZihGEumd
                      VqtuBKNPqZI1TzCQew6n8oFMjNhB8C0XMJlkDOQ=="
          } ],
          "time_val" : [ ]
        } ],
        "ext" : {
          "name2" : "val2",
          "name1" : "val1"
        },
        "ver" : "1.0",
        "profile" : "PDF",
        "hash_algo" : "http://www.w3.org/2001/04/xmlenc#sha512"
      }
    }
]]></artwork></figure>

</section>


  </back>

<!-- ##markdown-source:
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
1fjm+o39IsfACAH8nL7s4Wq2eQfEWxZzk9sNELxh42r1xfi609vW2kh053qN
k9aX86xxV2aQEKHy9uLBiYmVpFMrb9Q2a4QKUXkYwiS39ouJTMjP5xySIghT
eVt3cobAW1/2l/WX1WXdaa3GuZI7GrZcRON5Oc+1u/bNc85e6L2tYw5KBcad
SuN5tMyFnTd70VnUAq0/zvYrtdxjf+xovVHxcTDbgTA+m4tedlDdDo1lo9K7
7WVHvdZ9M2szdNrL8bpbsb1moT3UX66H9wWj+NgDWgzs3ShXLZEwLu0FQBYa
g62P0I7sGDrGYqdv691+vV+92o6c9ua50Bj17Fmhf7eqdXL9XXexamtV4+7x
rnajVdoFs9rv6v1Gs5ltXExe2i8MnbvxQ/PNeB0Me5tOftXqDgKnY9dq3cH4
ujmoA41yK7OrF42K4d7nbPfxTgfoGiVOP/bDR+NhYzrK93dGrbQbD0bWIxhN
TthJfVHsGr1xCziY71iBNe41/N6w3QYogxFM2BrOGGG7lfnw+c2uNXvBc6fW
gNXtdXdR8ju58d1ouZ0/9vsQn9kvwOK35+FsN1q23vReydVAIPq3TSZsk55f
bHfH8/FbuaDdjufGW7ZUt7NMs297qLUv2m1tNRHEdPAesR51jMnJsNCwxxYT
a4aGazVvytvmS73YfOvNmt164bHbLNQr9UKr0tyQZt/W3jSS2oD97lN/UD9v
LcZv3V4x6Cw3b8ZL2+r1/M1jb+z1BkZ+8ma3zUp5O1kUO2a/9tDvr1bArZox
yC36To396JvRazx07evtYLHYAsEqvUG/0Fqen0+y45a2KLrPL/NKszZvdZZb
r10ttZ+6WWvaJ3RXk0F/yiYBfUBODIck9kwB8fXVZS0Ae4E0AY3d7BANdq0q
rm2RPjRJ3RnbYIAu6i/VsMm0dDfJj1cTRtTndnWE2k1EHebBbOavEiZSaHHB
KOih8dYMJ4WGM7y52jWBBvB30wLtNW9zPniBFyCrO+r2tk2rUZo+n1Xm3k17
2/3Wo0muHszX+9x1r5QpXkNMlNf9opPPPXmd1yenEvS1y+W2F7x2HTd8HL70
p+GgnbWnrfJLdaHndvln9ut5w+I2byybxs2q9TAY5vKXvbuRVV5etd7MUegO
Xg1ne2/tLnLzcc7ONmzDWRTzzuz2W77XqjjeDfM7127pcXZTyi5u85Pas7Uc
XxcGs35QvdSMb3flTX24MTLr6l1w0Znmd4Oh3euOXp9zle3s9WLVvX9mP2kY
Tova3L/r78yKNZ+1TGt7lQEXkmtW1+u7Vm91o9eH19uLy+uqPs50vNe2Wx8v
+q9VfXBVuK81ZzTJ6/1gOajMVudv327um0ULkOu/bVa52/XosXnRLDz37kez
pdUqXxjNQWM9NBvjzP29VSxnLmbV1ymb5NG3tuHY1Od6xXW+FZzmW9VsXXca
tWHv0p0v1tt6o1V6GLZq5e1buZvvLcudrfdQ2qy15+aycTeiSZqQAGXWPf/x
aaD7r9lL8/6xOHH80cbzS9ZsZLrBTO9+a9mX5+3ltBQ2d+a3+mz3Zne+tR4e
zrevNEmprE0vHp6Gg3G2821lh7P19G19eRe+DVuPo1LpfO2+XvmPq8fS9n40
fx05bxOjUrvvUVShVHhog7VSVlKV4o3v4meeFpZxon5VTx5Np/6388J5Yz5Z
TytOMO3/48uV97i9vawt1rsX7b7f0Pqv9dr10J3352WzOL2/0pzod+D4P3ed
61xcXXmX9xPN/tt0vdLuci9X1mRWzD9f73JPz3//+8mpWDrYrWhpLJpGFzV7
RhfbnWIuz37K6schPmw7Og0fLWT4zINg9fXLFx7X4a9BfhHnGuTi1SB0jJ72
4XEfIjncEnIcfOXNN7/wsM31pDFagGNyxav8ZSF7cV6M7rwEFs1m5vN6cWJe
GMaFrl8Yk6vC+UTXjezFxbRo5s1CPFeyUImDv0ckxZt45XfpGlyFPAWv4jEt
p/J1PtXhCLi39BlR6w4LUaO04OQ0+eCRyeEO/rAYTsF7+PbuQsImU90yzg4o
6a+DLz69o5xh6d2XfeFh/2g/70uW/+oj+/dD/ecBrpBTJukV3cFcmKC5nofV
0vXNyHh9mO3cjZ1/miyd+5LRKC+tftDNhaX+zKqVSvP8PB0W+td/equeDx8G
EIw9mefaTaNQf6tN3YfSohAMvOzgb5td6dp8tTz9+Z1ZJMHnoDLFSyE1b4An
FCah+Vq86z7mJsHqxhu2h5fdt+p9z2s1nue3t1ev1/PzzbbaeW0/FK6Pr379
5pzr9vq+cPkyCrP3L83mYtZ4rjan5dykYC2t3WUpuJz/bTS/2vz9+Cx/T7Bk
nyFysp/CGH71d/Wk1QlrzS/rxt8m5rX9HDx335b6aF7cXj5cDW5K1dz90127
nLPc1qN93789Bs7E1kq99ttI9y2/vM1PwMg+gm2GyK6wvC9VL7RZ9nI+1TZA
96TwMMNjEnXjveN3UYvKKKnKxa+fZPE38kqFIvy5LBUu1fzleSG7z/SIsYuw
N7m6qPnN1rJhF9bnk+f7bKm2eJ6t3dLzNptzWu3d831vbM1vq+HSOEKG/msQ
Xt+3nl7H9Vz37ebZ3Fw4V26t+dKaX1/dZIfNhr2oPKLVfUebRPckw+6fSupz
wjQkbBHuMOYJHRieT+BK93LinqTNEnVP1niKz1f2cr10mVeE6RYk8vKtaFNI
NjebzeZsUzhzvdmXfDab+5I9/7Jd2mB9fvHnWuRG0JGw/0Wn8f8AZwZ+Vbd6
AAA=

-->

</rfc>

